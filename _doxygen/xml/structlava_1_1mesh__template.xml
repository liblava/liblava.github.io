<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="structlava_1_1mesh__template" kind="struct" language="C++" prot="public">
    <compoundname>lava::mesh_template</compoundname>
    <basecompoundref refid="structlava_1_1entity" prot="public" virt="non-virtual">lava::entity</basecompoundref>
    <includes refid="mesh_8hpp" local="no">mesh.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
        <defval><ref refid="structlava_1_1vertex" kindref="compound">vertex</ref></defval>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structlava_1_1mesh__template_1aeeef7bb3ec744b5281a113e570bd6988" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="structlava_1_1mesh__template" kindref="compound">mesh_template</ref>&lt; T &gt; &gt;</type>
        <definition>using lava::mesh_template&lt; T &gt;::s_ptr =  std::shared_ptr&lt;mesh_template&lt;T&gt;&gt;</definition>
        <argsstring></argsstring>
        <name>s_ptr</name>
        <qualifiedname>lava::mesh_template::s_ptr</qualifiedname>
        <briefdescription>
<para>Shared pointer to mesh. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="78" column="5" bodyfile="liblava/resource/mesh.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structlava_1_1mesh__template_1a928d2c024739fe1e0abdda04cabad6ec" prot="public" static="no">
        <type>std::map&lt; <ref refid="structlava_1_1id" kindref="compound">id</ref>, <ref refid="structlava_1_1mesh__template_1aeeef7bb3ec744b5281a113e570bd6988" kindref="member">s_ptr</ref> &gt;</type>
        <definition>using lava::mesh_template&lt; T &gt;::s_map =  std::map&lt;id, s_ptr&gt;</definition>
        <argsstring></argsstring>
        <name>s_map</name>
        <qualifiedname>lava::mesh_template::s_map</qualifiedname>
        <briefdescription>
<para>Map of meshes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="81" column="5" bodyfile="liblava/resource/mesh.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structlava_1_1mesh__template_1a04be3c660b75fa460305d8e1532a3d6a" prot="public" static="no">
        <type>std::vector&lt; <ref refid="structlava_1_1mesh__template_1aeeef7bb3ec744b5281a113e570bd6988" kindref="member">s_ptr</ref> &gt;</type>
        <definition>using lava::mesh_template&lt; T &gt;::s_list =  std::vector&lt;s_ptr&gt;</definition>
        <argsstring></argsstring>
        <name>s_list</name>
        <qualifiedname>lava::mesh_template::s_list</qualifiedname>
        <briefdescription>
<para>List of meshes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="84" column="5" bodyfile="liblava/resource/mesh.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structlava_1_1mesh__template_1a07b101db9b60f2a36dff0f6581d3284a" prot="public" static="no">
        <type>std::vector&lt; T &gt;</type>
        <definition>using lava::mesh_template&lt; T &gt;::vertex_list =  std::vector&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>vertex_list</name>
        <qualifiedname>lava::mesh_template::vertex_list</qualifiedname>
        <briefdescription>
<para>List of vertices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="87" column="5" bodyfile="liblava/resource/mesh.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structlava_1_1mesh__template_1add2b24aaf534691475c88a23af6f86db" prot="private" static="no" mutable="no">
        <type><ref refid="structlava_1_1device_1a6f7d378ef30e7bf1cd4fe208de859250" kindref="member">device::ptr</ref></type>
        <definition>device::ptr lava::mesh_template&lt; T &gt;::m_device</definition>
        <argsstring></argsstring>
        <name>m_device</name>
        <qualifiedname>lava::mesh_template::m_device</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Vulkan device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="245" column="17" bodyfile="liblava/resource/mesh.hpp" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1mesh__template_1af454737aa83e70f2b55c9fb299fc47cc" prot="private" static="no" mutable="no">
        <type><ref refid="structlava_1_1mesh__template__data" kindref="compound">mesh_template_data</ref>&lt; T &gt;</type>
        <definition>mesh_template_data&lt;T&gt; lava::mesh_template&lt; T &gt;::m_data</definition>
        <argsstring></argsstring>
        <name>m_data</name>
        <qualifiedname>lava::mesh_template::m_data</qualifiedname>
        <briefdescription>
<para>Mesh data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="248" column="24" bodyfile="liblava/resource/mesh.hpp" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1mesh__template_1ab134b0df3cb465f947a84d7169e5335c" prot="private" static="no" mutable="no">
        <type><ref refid="structlava_1_1buffer_1a0f51976de6893d420896e888899858a1" kindref="member">buffer::s_ptr</ref></type>
        <definition>buffer::s_ptr lava::mesh_template&lt; T &gt;::m_vertex_buffer</definition>
        <argsstring></argsstring>
        <name>m_vertex_buffer</name>
        <qualifiedname>lava::mesh_template::m_vertex_buffer</qualifiedname>
        <briefdescription>
<para>Vertex buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="251" column="19" bodyfile="liblava/resource/mesh.hpp" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1mesh__template_1af657d8e90d226c711ed9d6b136498f6d" prot="private" static="no" mutable="no">
        <type><ref refid="structlava_1_1buffer_1a0f51976de6893d420896e888899858a1" kindref="member">buffer::s_ptr</ref></type>
        <definition>buffer::s_ptr lava::mesh_template&lt; T &gt;::m_index_buffer</definition>
        <argsstring></argsstring>
        <name>m_index_buffer</name>
        <qualifiedname>lava::mesh_template::m_index_buffer</qualifiedname>
        <briefdescription>
<para>Index buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="254" column="19" bodyfile="liblava/resource/mesh.hpp" bodystart="254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1mesh__template_1a6e93b76e1220d38df7b4d01cc54508e7" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool lava::mesh_template&lt; T &gt;::m_mapped</definition>
        <argsstring></argsstring>
        <name>m_mapped</name>
        <qualifiedname>lava::mesh_template::m_mapped</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>Mapped state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="257" column="10" bodyfile="liblava/resource/mesh.hpp" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1mesh__template_1ae8e369d4df84bcd57ab59a9165beca4d" prot="private" static="no" mutable="no">
        <type>VmaMemoryUsage</type>
        <definition>VmaMemoryUsage lava::mesh_template&lt; T &gt;::m_memory_usage</definition>
        <argsstring></argsstring>
        <name>m_memory_usage</name>
        <qualifiedname>lava::mesh_template::m_memory_usage</qualifiedname>
        <initializer>= VMA_MEMORY_USAGE_CPU_TO_GPU</initializer>
        <briefdescription>
<para>Memory usage. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="260" column="20" bodyfile="liblava/resource/mesh.hpp" bodystart="260" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structlava_1_1mesh__template_1a372b62521677d195272f6e24441b5b7a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structlava_1_1mesh__template_1aeeef7bb3ec744b5281a113e570bd6988" kindref="member">s_ptr</ref></type>
        <definition>static s_ptr lava::mesh_template&lt; T &gt;::make</definition>
        <argsstring>()</argsstring>
        <name>make</name>
        <qualifiedname>lava::mesh_template::make</qualifiedname>
        <briefdescription>
<para>Make a new mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>s_ptr Shared pointer to mesh </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="93" column="18" bodyfile="liblava/resource/mesh.hpp" bodystart="93" bodyend="95"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structlava_1_1mesh__template_1ae7534d966bb2e9d5ab383406d8363722" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lava::mesh_template&lt; T &gt;::~mesh_template</definition>
        <argsstring>()</argsstring>
        <name>~mesh_template</name>
        <qualifiedname>lava::mesh_template::~mesh_template</qualifiedname>
        <briefdescription>
<para>Destroy the mesh. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="100" column="5" bodyfile="liblava/resource/mesh.hpp" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1mesh__template_1a65439956dc6df51ccf9a011a2e26cb8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lava::mesh_template&lt; T &gt;::create</definition>
        <argsstring>(device::ptr device, bool mapped=false, VmaMemoryUsage memory_usage=VMA_MEMORY_USAGE_CPU_TO_GPU)</argsstring>
        <name>create</name>
        <qualifiedname>lava::mesh_template::create</qualifiedname>
        <param>
          <type><ref refid="structlava_1_1device_1a6f7d378ef30e7bf1cd4fe208de859250" kindref="member">device::ptr</ref></type>
          <declname>device</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>mapped</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>VmaMemoryUsage</type>
          <declname>memory_usage</declname>
          <defval>VMA_MEMORY_USAGE_CPU_TO_GPU</defval>
        </param>
        <briefdescription>
<para>Create a new mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mapped</parametername>
</parameternamelist>
<parameterdescription>
<para>Map mesh data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_usage</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory usage </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Create was successful or failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="111" column="10" bodyfile="liblava/resource/mesh.hpp" bodystart="358" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1mesh__template_1ac931db5680dd91101a987296b53e960c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lava::mesh_template&lt; T &gt;::destroy</definition>
        <argsstring>()</argsstring>
        <name>destroy</name>
        <qualifiedname>lava::mesh_template::destroy</qualifiedname>
        <briefdescription>
<para>Destroy the mesh. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="118" column="10" bodyfile="liblava/resource/mesh.hpp" bodystart="297" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1mesh__template_1a977d87b340a7c9f048c53f616096ed2f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lava::mesh_template&lt; T &gt;::bind</definition>
        <argsstring>(VkCommandBuffer cmd_buf) const</argsstring>
        <name>bind</name>
        <qualifiedname>lava::mesh_template::bind</qualifiedname>
        <param>
          <type>VkCommandBuffer</type>
          <declname>cmd_buf</declname>
        </param>
        <briefdescription>
<para>Bind the mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Command buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="124" column="10" bodyfile="liblava/resource/mesh.hpp" bodystart="265" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1mesh__template_1a46507f22f7fc1151fd3f94edb027dcc5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lava::mesh_template&lt; T &gt;::draw</definition>
        <argsstring>(VkCommandBuffer cmd_buf) const</argsstring>
        <name>draw</name>
        <qualifiedname>lava::mesh_template::draw</qualifiedname>
        <param>
          <type>VkCommandBuffer</type>
          <declname>cmd_buf</declname>
        </param>
        <briefdescription>
<para>Draw the mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Command buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="130" column="10" bodyfile="liblava/resource/mesh.hpp" bodystart="284" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1mesh__template_1aeb011c73afe5340e9a72574f2d2c333f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lava::mesh_template&lt; T &gt;::bind_draw</definition>
        <argsstring>(VkCommandBuffer cmd_buf) const</argsstring>
        <name>bind_draw</name>
        <qualifiedname>lava::mesh_template::bind_draw</qualifiedname>
        <param>
          <type>VkCommandBuffer</type>
          <declname>cmd_buf</declname>
        </param>
        <briefdescription>
<para>Bind and draw the mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Command buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="136" column="10" bodyfile="liblava/resource/mesh.hpp" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1mesh__template_1aed03147c43b3f14db7622c6183e11b59" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lava::mesh_template&lt; T &gt;::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <qualifiedname>lava::mesh_template::empty</qualifiedname>
        <briefdescription>
<para>Check if mesh is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Mesh is empty or not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="145" column="10" bodyfile="liblava/resource/mesh.hpp" bodystart="145" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1mesh__template_1a25a6fab4f8ce6532389a8e88d4ef700d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lava::mesh_template&lt; T &gt;::set_data</definition>
        <argsstring>(mesh_template_data&lt; T &gt; const &amp;value)</argsstring>
        <name>set_data</name>
        <qualifiedname>lava::mesh_template::set_data</qualifiedname>
        <param>
          <type><ref refid="structlava_1_1mesh__template__data" kindref="compound">mesh_template_data</ref>&lt; T &gt; const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the mesh data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Mesh data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="153" column="10" bodyfile="liblava/resource/mesh.hpp" bodystart="153" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1mesh__template_1acbbf206ddeba856352db1c42862bed59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structlava_1_1mesh__template__data" kindref="compound">mesh_template_data</ref>&lt; T &gt; &amp;</type>
        <definition>mesh_template_data&lt; T &gt; &amp; lava::mesh_template&lt; T &gt;::get_data</definition>
        <argsstring>()</argsstring>
        <name>get_data</name>
        <qualifiedname>lava::mesh_template::get_data</qualifiedname>
        <briefdescription>
<para>Get the mesh data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>mesh_data&amp; Mesh data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="161" column="24" bodyfile="liblava/resource/mesh.hpp" bodystart="161" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1mesh__template_1a8b110080cb6cb594a0c51584ef1dce57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lava::mesh_template&lt; T &gt;::add_data</definition>
        <argsstring>(mesh_template_data&lt; T &gt; const &amp;value)</argsstring>
        <name>add_data</name>
        <qualifiedname>lava::mesh_template::add_data</qualifiedname>
        <param>
          <type><ref refid="structlava_1_1mesh__template__data" kindref="compound">mesh_template_data</ref>&lt; T &gt; const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Add mesh data to existing data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Mesh data to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="169" column="10" bodyfile="liblava/resource/mesh.hpp" bodystart="169" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1mesh__template_1a4f5449dbed9c68def2e84cdbd97bb25a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structlava_1_1mesh__template_1a07b101db9b60f2a36dff0f6581d3284a" kindref="member">vertex_list</ref> &amp;</type>
        <definition>vertex_list &amp; lava::mesh_template&lt; T &gt;::get_vertices</definition>
        <argsstring>()</argsstring>
        <name>get_vertices</name>
        <qualifiedname>lava::mesh_template::get_vertices</qualifiedname>
        <briefdescription>
<para>Get the vertices of the mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structlava_1_1vertex_1a6eabb986548885259ae4b96c5c48a498" kindref="member">vertex::list</ref>&amp; List of vertices </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="177" column="17" bodyfile="liblava/resource/mesh.hpp" bodystart="177" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1mesh__template_1af19bbd42de50c795c13f5607cf53c3ef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structlava_1_1mesh__template_1a07b101db9b60f2a36dff0f6581d3284a" kindref="member">vertex_list</ref> const &amp;</type>
        <definition>vertex_list const  &amp; lava::mesh_template&lt; T &gt;::get_vertices</definition>
        <argsstring>() const</argsstring>
        <name>get_vertices</name>
        <qualifiedname>lava::mesh_template::get_vertices</qualifiedname>
        <briefdescription>
<para>Get the const vertices of the mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structlava_1_1vertex_1a6eabb986548885259ae4b96c5c48a498" kindref="member">vertex::list</ref> const&amp; List of vertices </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="185" column="23" bodyfile="liblava/resource/mesh.hpp" bodystart="185" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1mesh__template_1a2d2462d0bd17f2996f192a1c83e11844" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="types_8hpp_1ae3c4bbc50dd4583ab0df2c24c49a49c9" kindref="member">ui32</ref></type>
        <definition>ui32 lava::mesh_template&lt; T &gt;::get_vertices_count</definition>
        <argsstring>() const</argsstring>
        <name>get_vertices_count</name>
        <qualifiedname>lava::mesh_template::get_vertices_count</qualifiedname>
        <briefdescription>
<para>Get the vertices count of the mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>ui32 Number of vertices </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="193" column="10" bodyfile="liblava/resource/mesh.hpp" bodystart="193" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1mesh__template_1a6a33cb7f77dbad21a3b7fada5a751fb3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="types_8hpp_1acc29b973e1c2c9dc4fb5fcc76836c851" kindref="member">index_list</ref> &amp;</type>
        <definition>index_list &amp; lava::mesh_template&lt; T &gt;::get_indices</definition>
        <argsstring>()</argsstring>
        <name>get_indices</name>
        <qualifiedname>lava::mesh_template::get_indices</qualifiedname>
        <briefdescription>
<para>Get the indices of the mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>index_list&amp; List of indices </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="201" column="16" bodyfile="liblava/resource/mesh.hpp" bodystart="201" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1mesh__template_1a13e0ed80437c331a4e56b20d3f816465" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="types_8hpp_1acc29b973e1c2c9dc4fb5fcc76836c851" kindref="member">index_list</ref> const &amp;</type>
        <definition>index_list const  &amp; lava::mesh_template&lt; T &gt;::get_indices</definition>
        <argsstring>() const</argsstring>
        <name>get_indices</name>
        <qualifiedname>lava::mesh_template::get_indices</qualifiedname>
        <briefdescription>
<para>Get the const indices of the mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>index_list const&amp; List of indices </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="209" column="22" bodyfile="liblava/resource/mesh.hpp" bodystart="209" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1mesh__template_1aed0db990910482de9b21f3809413468d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="types_8hpp_1ae3c4bbc50dd4583ab0df2c24c49a49c9" kindref="member">ui32</ref></type>
        <definition>ui32 lava::mesh_template&lt; T &gt;::get_indices_count</definition>
        <argsstring>() const</argsstring>
        <name>get_indices_count</name>
        <qualifiedname>lava::mesh_template::get_indices_count</qualifiedname>
        <briefdescription>
<para>Get the indices count of the mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>ui32 Number of indices </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="217" column="10" bodyfile="liblava/resource/mesh.hpp" bodystart="217" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1mesh__template_1a53fe723a0b3f47a733aad3c42048b78e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lava::mesh_template&lt; T &gt;::reload</definition>
        <argsstring>()</argsstring>
        <name>reload</name>
        <qualifiedname>lava::mesh_template::reload</qualifiedname>
        <briefdescription>
<para>Reload the mesh data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Reload was successful or failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="225" column="10" bodyfile="liblava/resource/mesh.hpp" bodystart="305" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1mesh__template_1ab993bbce7af4ac1495ae5f2f56dc7c1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structlava_1_1buffer_1a0f51976de6893d420896e888899858a1" kindref="member">buffer::s_ptr</ref></type>
        <definition>buffer::s_ptr lava::mesh_template&lt; T &gt;::get_vertex_buffer</definition>
        <argsstring>()</argsstring>
        <name>get_vertex_buffer</name>
        <qualifiedname>lava::mesh_template::get_vertex_buffer</qualifiedname>
        <briefdescription>
<para>Get the vertex buffer of the mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structlava_1_1buffer_1a0f51976de6893d420896e888899858a1" kindref="member">buffer::s_ptr</ref> Shared pointer to buffer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="231" column="19" bodyfile="liblava/resource/mesh.hpp" bodystart="231" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1mesh__template_1a913250b9f2d63f32bc3151d09a9dc991" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structlava_1_1buffer_1a0f51976de6893d420896e888899858a1" kindref="member">buffer::s_ptr</ref></type>
        <definition>buffer::s_ptr lava::mesh_template&lt; T &gt;::get_index_buffer</definition>
        <argsstring>()</argsstring>
        <name>get_index_buffer</name>
        <qualifiedname>lava::mesh_template::get_index_buffer</qualifiedname>
        <briefdescription>
<para>Get the index buffer of the mesh. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structlava_1_1buffer_1a0f51976de6893d420896e888899858a1" kindref="member">buffer::s_ptr</ref> Shared pointer to buffer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/resource/mesh.hpp" line="239" column="19" bodyfile="liblava/resource/mesh.hpp" bodystart="239" bodyend="241"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Temporary templated mesh. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Vertex struct typename </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>lava::entity</label>
        <link refid="structlava_1_1entity"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>lava::interface</label>
        <link refid="structlava_1_1interface"/>
      </node>
      <node id="1">
        <label>lava::mesh_template&lt; T &gt;</label>
        <link refid="structlava_1_1mesh__template"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>lava::no_copy_no_move</label>
        <link refid="structlava_1_1no__copy__no__move"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>lava::entity</label>
        <link refid="structlava_1_1entity"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>lava::interface</label>
        <link refid="structlava_1_1interface"/>
      </node>
      <node id="1">
        <label>lava::mesh_template&lt; T &gt;</label>
        <link refid="structlava_1_1mesh__template"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>lava::no_copy_no_move</label>
        <link refid="structlava_1_1no__copy__no__move"/>
      </node>
    </collaborationgraph>
    <location file="liblava/resource/mesh.hpp" line="76" column="1" bodyfile="liblava/resource/mesh.hpp" bodystart="76" bodyend="261"/>
    <listofallmembers>
      <member refid="structlava_1_1mesh__template_1a8b110080cb6cb594a0c51584ef1dce57" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>add_data</name></member>
      <member refid="structlava_1_1mesh__template_1a977d87b340a7c9f048c53f616096ed2f" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>bind</name></member>
      <member refid="structlava_1_1mesh__template_1aeb011c73afe5340e9a72574f2d2c333f" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>bind_draw</name></member>
      <member refid="structlava_1_1mesh__template_1a65439956dc6df51ccf9a011a2e26cb8e" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>create</name></member>
      <member refid="structlava_1_1mesh__template_1ac931db5680dd91101a987296b53e960c" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>destroy</name></member>
      <member refid="structlava_1_1mesh__template_1a46507f22f7fc1151fd3f94edb027dcc5" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>draw</name></member>
      <member refid="structlava_1_1mesh__template_1aed03147c43b3f14db7622c6183e11b59" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>empty</name></member>
      <member refid="structlava_1_1entity_1a39066de3954adf265c61c28f0a3b521c" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>entity</name></member>
      <member refid="structlava_1_1mesh__template_1acbbf206ddeba856352db1c42862bed59" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>get_data</name></member>
      <member refid="structlava_1_1entity_1adfe6db1cb4d47cd34c36d3225e3571b7" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>get_id</name></member>
      <member refid="structlava_1_1mesh__template_1a913250b9f2d63f32bc3151d09a9dc991" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>get_index_buffer</name></member>
      <member refid="structlava_1_1mesh__template_1a6a33cb7f77dbad21a3b7fada5a751fb3" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>get_indices</name></member>
      <member refid="structlava_1_1mesh__template_1a13e0ed80437c331a4e56b20d3f816465" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>get_indices</name></member>
      <member refid="structlava_1_1mesh__template_1aed0db990910482de9b21f3809413468d" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>get_indices_count</name></member>
      <member refid="structlava_1_1mesh__template_1ab993bbce7af4ac1495ae5f2f56dc7c1f" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>get_vertex_buffer</name></member>
      <member refid="structlava_1_1mesh__template_1a4f5449dbed9c68def2e84cdbd97bb25a" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>get_vertices</name></member>
      <member refid="structlava_1_1mesh__template_1af19bbd42de50c795c13f5607cf53c3ef" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>get_vertices</name></member>
      <member refid="structlava_1_1mesh__template_1a2d2462d0bd17f2996f192a1c83e11844" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>get_vertices_count</name></member>
      <member refid="structlava_1_1mesh__template_1af454737aa83e70f2b55c9fb299fc47cc" prot="private" virt="non-virtual"><scope>lava::mesh_template</scope><name>m_data</name></member>
      <member refid="structlava_1_1mesh__template_1add2b24aaf534691475c88a23af6f86db" prot="private" virt="non-virtual"><scope>lava::mesh_template</scope><name>m_device</name></member>
      <member refid="structlava_1_1mesh__template_1af657d8e90d226c711ed9d6b136498f6d" prot="private" virt="non-virtual"><scope>lava::mesh_template</scope><name>m_index_buffer</name></member>
      <member refid="structlava_1_1mesh__template_1a6e93b76e1220d38df7b4d01cc54508e7" prot="private" virt="non-virtual"><scope>lava::mesh_template</scope><name>m_mapped</name></member>
      <member refid="structlava_1_1mesh__template_1ae8e369d4df84bcd57ab59a9165beca4d" prot="private" virt="non-virtual"><scope>lava::mesh_template</scope><name>m_memory_usage</name></member>
      <member refid="structlava_1_1mesh__template_1ab134b0df3cb465f947a84d7169e5335c" prot="private" virt="non-virtual"><scope>lava::mesh_template</scope><name>m_vertex_buffer</name></member>
      <member refid="structlava_1_1mesh__template_1a372b62521677d195272f6e24441b5b7a" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>make</name></member>
      <member refid="structlava_1_1no__copy__no__move_1ac97369ee1b1a70996ab3b9b24bf26432" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>no_copy_no_move</name></member>
      <member refid="structlava_1_1no__copy__no__move_1a7942908379614cbb8d6260192d76347c" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>no_copy_no_move</name></member>
      <member refid="structlava_1_1no__copy__no__move_1aa3211995685035c9ca4d0a3a7e4b5ac8" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>operator=</name></member>
      <member refid="structlava_1_1mesh__template_1a53fe723a0b3f47a733aad3c42048b78e" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>reload</name></member>
      <member refid="structlava_1_1mesh__template_1a04be3c660b75fa460305d8e1532a3d6a" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>s_list</name></member>
      <member refid="structlava_1_1mesh__template_1a928d2c024739fe1e0abdda04cabad6ec" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>s_map</name></member>
      <member refid="structlava_1_1mesh__template_1aeeef7bb3ec744b5281a113e570bd6988" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>s_ptr</name></member>
      <member refid="structlava_1_1mesh__template_1a25a6fab4f8ce6532389a8e88d4ef700d" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>set_data</name></member>
      <member refid="structlava_1_1mesh__template_1a07b101db9b60f2a36dff0f6581d3284a" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>vertex_list</name></member>
      <member refid="structlava_1_1interface_1a9b6fe12d71f6da5dea89d44c62a5a046" prot="public" virt="virtual"><scope>lava::mesh_template</scope><name>~interface</name></member>
      <member refid="structlava_1_1mesh__template_1ae7534d966bb2e9d5ab383406d8363722" prot="public" virt="non-virtual"><scope>lava::mesh_template</scope><name>~mesh_template</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
