<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="structlava_1_1id" kind="struct" language="C++" prot="public">
    <compoundname>lava::id</compoundname>
    <includes refid="id_8hpp" local="no">id.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structlava_1_1id_1a226df789a94177f765bdcaac2988eda0" prot="public" static="no">
        <type><ref refid="structlava_1_1id" kindref="compound">id</ref> const  &amp;</type>
        <definition>using lava::id::ref =  id const&amp;</definition>
        <argsstring></argsstring>
        <name>ref</name>
        <qualifiedname>lava::id::ref</qualifiedname>
        <briefdescription>
<para>Reference to id. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/core/id.hpp" line="24" column="5" bodyfile="liblava/core/id.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structlava_1_1id_1a5681d138e316875b5c91f34110f6b7ca" prot="public" static="no">
        <type>std::set&lt; <ref refid="structlava_1_1id" kindref="compound">id</ref> &gt;</type>
        <definition>using lava::id::set =  std::set&lt;id&gt;</definition>
        <argsstring></argsstring>
        <name>set</name>
        <qualifiedname>lava::id::set</qualifiedname>
        <briefdescription>
<para>Set of ids. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/core/id.hpp" line="27" column="5" bodyfile="liblava/core/id.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structlava_1_1id_1a8cb3dbbd2611027c0b2b095db094bb81" prot="public" static="no">
        <type><ref refid="structlava_1_1id_1a5681d138e316875b5c91f34110f6b7ca" kindref="member">set</ref> const  &amp;</type>
        <definition>using lava::id::set_ref =  set const&amp;</definition>
        <argsstring></argsstring>
        <name>set_ref</name>
        <qualifiedname>lava::id::set_ref</qualifiedname>
        <briefdescription>
<para>Reference to set of ids. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/core/id.hpp" line="30" column="5" bodyfile="liblava/core/id.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structlava_1_1id_1a76fc344f9c0b634c58611fb0a73528dd" prot="public" static="no">
        <type>std::vector&lt; <ref refid="structlava_1_1id" kindref="compound">id</ref> &gt;</type>
        <definition>using lava::id::list =  std::vector&lt;id&gt;</definition>
        <argsstring></argsstring>
        <name>list</name>
        <qualifiedname>lava::id::list</qualifiedname>
        <briefdescription>
<para>List if ids. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/core/id.hpp" line="33" column="5" bodyfile="liblava/core/id.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structlava_1_1id_1a454b3ed8f4e34c06cef590e45bdd6f45" prot="public" static="no">
        <type>std::map&lt; <ref refid="structlava_1_1id" kindref="compound">id</ref>, <ref refid="structlava_1_1id" kindref="compound">id</ref> &gt;</type>
        <definition>using lava::id::map =  std::map&lt;id, id&gt;</definition>
        <argsstring></argsstring>
        <name>map</name>
        <qualifiedname>lava::id::map</qualifiedname>
        <briefdescription>
<para>Map of ids. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/core/id.hpp" line="36" column="5" bodyfile="liblava/core/id.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structlava_1_1id_1a8328204a339b365090eb0c68a31560f1" prot="public" static="no">
        <type>std::map&lt; <ref refid="structlava_1_1id" kindref="compound">id</ref>, <ref refid="types_8hpp_1a2a40eb7fccb1ebcfd58d6d4b7a078e5c" kindref="member">index</ref> &gt;</type>
        <definition>using lava::id::index_map =  std::map&lt;id, index&gt;</definition>
        <argsstring></argsstring>
        <name>index_map</name>
        <qualifiedname>lava::id::index_map</qualifiedname>
        <briefdescription>
<para>Index map by ids. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/core/id.hpp" line="39" column="5" bodyfile="liblava/core/id.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structlava_1_1id_1a5a8dc3a1db21f6e29cb4518f465b1bb3" prot="public" static="no">
        <type>std::map&lt; <ref refid="structlava_1_1id" kindref="compound">id</ref>, <ref refid="types_8hpp_1a56891e6c1c56efa24abd6b84f71d9145" kindref="member">string</ref> &gt;</type>
        <definition>using lava::id::string_map =  std::map&lt;id, string&gt;</definition>
        <argsstring></argsstring>
        <name>string_map</name>
        <qualifiedname>lava::id::string_map</qualifiedname>
        <briefdescription>
<para>String map by ids. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/core/id.hpp" line="42" column="5" bodyfile="liblava/core/id.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structlava_1_1id_1a8dd9c3002186af2d2d15d778238e488a" prot="public" static="no" mutable="no">
        <type><ref refid="types_8hpp_1a2a40eb7fccb1ebcfd58d6d4b7a078e5c" kindref="member">index</ref></type>
        <definition>index lava::id::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <qualifiedname>lava::id::value</qualifiedname>
        <initializer>= <ref refid="types_8hpp_1a90deae5aeca0497b3b7e6c6316ac5105" kindref="member">no_index</ref></initializer>
        <briefdescription>
<para>Value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/core/id.hpp" line="57" column="11" bodyfile="liblava/core/id.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structlava_1_1id_1a1caf19994deda21262dac41097b54de3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>lava::id::id</definition>
        <argsstring>()=default</argsstring>
        <name>id</name>
        <qualifiedname>lava::id::id</qualifiedname>
        <briefdescription>
<para>Construct a new id. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/core/id.hpp" line="47" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1id_1a18c9a54cc887849df0195bd9a3a03c2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lava::id::id</definition>
        <argsstring>(index value)</argsstring>
        <name>id</name>
        <qualifiedname>lava::id::id</qualifiedname>
        <param>
          <type><ref refid="types_8hpp_1a2a40eb7fccb1ebcfd58d6d4b7a078e5c" kindref="member">index</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Construct a new id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/core/id.hpp" line="53" column="5" bodyfile="liblava/core/id.hpp" bodystart="53" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1id_1ade2d3cd5e892b75c94c8028c75e72c71" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lava::id::valid</definition>
        <argsstring>() const</argsstring>
        <name>valid</name>
        <qualifiedname>lava::id::valid</qualifiedname>
        <briefdescription>
<para>Check if the id is valid. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Id is valid or not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/core/id.hpp" line="63" column="10" bodyfile="liblava/core/id.hpp" bodystart="63" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1id_1ab9fd67ed78ec6d91cb691d850fe21815" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="types_8hpp_1a56891e6c1c56efa24abd6b84f71d9145" kindref="member">string</ref></type>
        <definition>string lava::id::to_string</definition>
        <argsstring>() const</argsstring>
        <name>to_string</name>
        <qualifiedname>lava::id::to_string</qualifiedname>
        <briefdescription>
<para>Convert the id to string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>string String representation of id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/core/id.hpp" line="71" column="12" bodyfile="liblava/core/id.hpp" bodystart="71" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1id_1a576815d2775ff7d95a746322d50f9c57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lava::id::invalidate</definition>
        <argsstring>()</argsstring>
        <name>invalidate</name>
        <qualifiedname>lava::id::invalidate</qualifiedname>
        <briefdescription>
<para>Invalidate id. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/core/id.hpp" line="78" column="10" bodyfile="liblava/core/id.hpp" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1id_1a11620ef3741fe0f21f47aa5d21da131f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto lava::id::operator&lt;=&gt;</definition>
        <argsstring>(id const &amp;) const =default</argsstring>
        <name>operator&lt;=&gt;</name>
        <qualifiedname>lava::id::operator&lt;=&gt;</qualifiedname>
        <param>
          <type><ref refid="structlava_1_1id" kindref="compound">id</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>Compare operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/core/id.hpp" line="85" column="5"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Identification. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="liblava/core/id.hpp" line="22" column="1" bodyfile="liblava/core/id.hpp" bodystart="22" bodyend="86"/>
    <listofallmembers>
      <member refid="structlava_1_1id_1a1caf19994deda21262dac41097b54de3" prot="public" virt="non-virtual"><scope>lava::id</scope><name>id</name></member>
      <member refid="structlava_1_1id_1a18c9a54cc887849df0195bd9a3a03c2a" prot="public" virt="non-virtual"><scope>lava::id</scope><name>id</name></member>
      <member refid="structlava_1_1id_1a8328204a339b365090eb0c68a31560f1" prot="public" virt="non-virtual"><scope>lava::id</scope><name>index_map</name></member>
      <member refid="structlava_1_1id_1a576815d2775ff7d95a746322d50f9c57" prot="public" virt="non-virtual"><scope>lava::id</scope><name>invalidate</name></member>
      <member refid="structlava_1_1id_1a76fc344f9c0b634c58611fb0a73528dd" prot="public" virt="non-virtual"><scope>lava::id</scope><name>list</name></member>
      <member refid="structlava_1_1id_1a454b3ed8f4e34c06cef590e45bdd6f45" prot="public" virt="non-virtual"><scope>lava::id</scope><name>map</name></member>
      <member refid="structlava_1_1id_1a11620ef3741fe0f21f47aa5d21da131f" prot="public" virt="non-virtual"><scope>lava::id</scope><name>operator&lt;=&gt;</name></member>
      <member refid="structlava_1_1id_1a226df789a94177f765bdcaac2988eda0" prot="public" virt="non-virtual"><scope>lava::id</scope><name>ref</name></member>
      <member refid="structlava_1_1id_1a5681d138e316875b5c91f34110f6b7ca" prot="public" virt="non-virtual"><scope>lava::id</scope><name>set</name></member>
      <member refid="structlava_1_1id_1a8cb3dbbd2611027c0b2b095db094bb81" prot="public" virt="non-virtual"><scope>lava::id</scope><name>set_ref</name></member>
      <member refid="structlava_1_1id_1a5a8dc3a1db21f6e29cb4518f465b1bb3" prot="public" virt="non-virtual"><scope>lava::id</scope><name>string_map</name></member>
      <member refid="structlava_1_1id_1ab9fd67ed78ec6d91cb691d850fe21815" prot="public" virt="non-virtual"><scope>lava::id</scope><name>to_string</name></member>
      <member refid="structlava_1_1id_1ade2d3cd5e892b75c94c8028c75e72c71" prot="public" virt="non-virtual"><scope>lava::id</scope><name>valid</name></member>
      <member refid="structlava_1_1id_1a8dd9c3002186af2d2d15d778238e488a" prot="public" virt="non-virtual"><scope>lava::id</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
