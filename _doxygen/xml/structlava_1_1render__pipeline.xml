<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="structlava_1_1render__pipeline" kind="struct" language="C++" prot="public">
    <compoundname>lava::render_pipeline</compoundname>
    <basecompoundref refid="structlava_1_1pipeline" prot="public" virt="non-virtual">lava::pipeline</basecompoundref>
    <includes refid="render__pipeline_8hpp" local="no">render_pipeline.hpp</includes>
    <innerclass refid="structlava_1_1render__pipeline_1_1create__info" prot="public">lava::render_pipeline::create_info</innerclass>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="structlava_1_1render__pipeline_1a43ef7c8f15057601584b8fd742164854" prot="public" static="no" strong="yes">
        <type><ref refid="types_8hpp_1a2a40eb7fccb1ebcfd58d6d4b7a078e5c" kindref="member">index</ref></type>
        <name>sizing_mode</name>
        <qualifiedname>lava::render_pipeline::sizing_mode</qualifiedname>
        <enumvalue id="structlava_1_1render__pipeline_1a43ef7c8f15057601584b8fd742164854aa43c1b0aa53a0c908810c06ab1ff3967" prot="public">
          <name>input</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structlava_1_1render__pipeline_1a43ef7c8f15057601584b8fd742164854adc4d53aa0d117d8b189b36d161af4e96" prot="public">
          <name>absolute</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structlava_1_1render__pipeline_1a43ef7c8f15057601584b8fd742164854a99c483e1d11b1a279a2a1a3960528487" prot="public">
          <name>relative</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Sizing modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="30" column="5" bodyfile="liblava/block/render_pipeline.hpp" bodystart="30" bodyend="34"/>
      </memberdef>
      <memberdef kind="typedef" id="structlava_1_1render__pipeline_1a7177a0f9ce21dd18b6f7befe611649dd" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="structlava_1_1render__pipeline" kindref="compound">render_pipeline</ref> &gt;</type>
        <definition>using lava::render_pipeline::s_ptr =  std::shared_ptr&lt;render_pipeline&gt;</definition>
        <argsstring></argsstring>
        <name>s_ptr</name>
        <qualifiedname>lava::render_pipeline::s_ptr</qualifiedname>
        <briefdescription>
<para>Shared pointer to render pipeline. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="19" column="5" bodyfile="liblava/block/render_pipeline.hpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structlava_1_1render__pipeline_1ae61c7a20a6291d9e2cd16b3b85072a73" prot="public" static="no">
        <type>std::map&lt; <ref refid="structlava_1_1id" kindref="compound">id</ref>, <ref refid="structlava_1_1render__pipeline_1a7177a0f9ce21dd18b6f7befe611649dd" kindref="member">s_ptr</ref> &gt;</type>
        <definition>using lava::render_pipeline::s_map =  std::map&lt;id, s_ptr&gt;</definition>
        <argsstring></argsstring>
        <name>s_map</name>
        <qualifiedname>lava::render_pipeline::s_map</qualifiedname>
        <briefdescription>
<para>Map of render pipelines. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="22" column="5" bodyfile="liblava/block/render_pipeline.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structlava_1_1render__pipeline_1a4c7ab3e77536e3ab07b747165925e47c" prot="public" static="no">
        <type>std::vector&lt; <ref refid="structlava_1_1render__pipeline_1a7177a0f9ce21dd18b6f7befe611649dd" kindref="member">s_ptr</ref> &gt;</type>
        <definition>using lava::render_pipeline::s_list =  std::vector&lt;s_ptr&gt;</definition>
        <argsstring></argsstring>
        <name>s_list</name>
        <qualifiedname>lava::render_pipeline::s_list</qualifiedname>
        <briefdescription>
<para>List of render pipelines. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="25" column="5" bodyfile="liblava/block/render_pipeline.hpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structlava_1_1render__pipeline_1a19085363b6b94d74bd7ee809f7b4e885" prot="public" static="no">
        <type>std::function&lt; bool(<ref refid="structlava_1_1render__pipeline_1_1create__info" kindref="compound">create_info</ref> &amp;)&gt;</type>
        <definition>using lava::render_pipeline::create_func =  std::function&lt;bool(create_info&amp;)&gt;</definition>
        <argsstring></argsstring>
        <name>create_func</name>
        <qualifiedname>lava::render_pipeline::create_func</qualifiedname>
        <briefdescription>
<para>Create function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="407" column="5" bodyfile="liblava/block/render_pipeline.hpp" bodystart="407" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structlava_1_1render__pipeline_1a8a5f79ab779d12b67c79c008694157b6" prot="public" static="no" mutable="no">
        <type><ref refid="structlava_1_1render__pipeline_1a19085363b6b94d74bd7ee809f7b4e885" kindref="member">create_func</ref></type>
        <definition>create_func lava::render_pipeline::on_create</definition>
        <argsstring></argsstring>
        <name>on_create</name>
        <qualifiedname>lava::render_pipeline::on_create</qualifiedname>
        <briefdescription>
<para>Called on render pipeline create. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="410" column="17" bodyfile="liblava/block/render_pipeline.hpp" bodystart="410" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structlava_1_1render__pipeline_1a1579595b69d4e060fee1d3a5744f7fb5" prot="private" static="no" mutable="no">
        <type>VkRenderPass</type>
        <definition>VkRenderPass lava::render_pipeline::m_render_pass</definition>
        <argsstring></argsstring>
        <name>m_render_pass</name>
        <qualifiedname>lava::render_pipeline::m_render_pass</qualifiedname>
        <initializer>= VK_NULL_HANDLE</initializer>
        <briefdescription>
<para>Vulkan render pass. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="425" column="18" bodyfile="liblava/block/render_pipeline.hpp" bodystart="425" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1render__pipeline_1a6b09ddfb109535bb27b12dde0288f34e" prot="private" static="no" mutable="no">
        <type><ref refid="types_8hpp_1a2a40eb7fccb1ebcfd58d6d4b7a078e5c" kindref="member">index</ref></type>
        <definition>index lava::render_pipeline::m_subpass</definition>
        <argsstring></argsstring>
        <name>m_subpass</name>
        <qualifiedname>lava::render_pipeline::m_subpass</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Subpass index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="428" column="11" bodyfile="liblava/block/render_pipeline.hpp" bodystart="428" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1render__pipeline_1a7646c3d47bce884a6335aab5354810a4" prot="private" static="no" mutable="no">
        <type><ref refid="structlava_1_1render__pipeline_1_1create__info" kindref="compound">create_info</ref></type>
        <definition>create_info lava::render_pipeline::m_info</definition>
        <argsstring></argsstring>
        <name>m_info</name>
        <qualifiedname>lava::render_pipeline::m_info</qualifiedname>
        <briefdescription>
<para>Create information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="431" column="17" bodyfile="liblava/block/render_pipeline.hpp" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1render__pipeline_1a514632ad39910470f0f54b7952d9b6d5" prot="private" static="no" mutable="no">
        <type><ref refid="base_2base_8hpp_1a919bd0b8a2dfec094ec8cc718fdd0c9c" kindref="member">VkVertexInputBindingDescriptions</ref></type>
        <definition>VkVertexInputBindingDescriptions lava::render_pipeline::m_vertex_input_bindings</definition>
        <argsstring></argsstring>
        <name>m_vertex_input_bindings</name>
        <qualifiedname>lava::render_pipeline::m_vertex_input_bindings</qualifiedname>
        <briefdescription>
<para>List of vertex input binding descriptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="434" column="38" bodyfile="liblava/block/render_pipeline.hpp" bodystart="434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1render__pipeline_1a1b30d2350c7e208a12634dd0e1611578" prot="private" static="no" mutable="no">
        <type><ref refid="base_2base_8hpp_1acede95ebeecb8bdd7a855ba1f2b518dc" kindref="member">VkVertexInputAttributeDescriptions</ref></type>
        <definition>VkVertexInputAttributeDescriptions lava::render_pipeline::m_vertex_input_attributes</definition>
        <argsstring></argsstring>
        <name>m_vertex_input_attributes</name>
        <qualifiedname>lava::render_pipeline::m_vertex_input_attributes</qualifiedname>
        <briefdescription>
<para>List of vertex input attribute descriptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="437" column="40" bodyfile="liblava/block/render_pipeline.hpp" bodystart="437" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1render__pipeline_1a3c75d0d4ececfd11c862325d7c465cee" prot="private" static="no" mutable="no">
        <type><ref refid="base_2base_8hpp_1a8f0ca12074ec9090940eb7b5f0ff61ac" kindref="member">VkPipelineColorBlendAttachmentStates</ref></type>
        <definition>VkPipelineColorBlendAttachmentStates lava::render_pipeline::m_color_blend_attachment_states</definition>
        <argsstring></argsstring>
        <name>m_color_blend_attachment_states</name>
        <qualifiedname>lava::render_pipeline::m_color_blend_attachment_states</qualifiedname>
        <briefdescription>
<para>List of pipeline color blend attachment states. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="440" column="42" bodyfile="liblava/block/render_pipeline.hpp" bodystart="440" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1render__pipeline_1a5472f0fbd8c04145a8666f8b3d2a5caa" prot="private" static="no" mutable="no">
        <type>VkPipelineColorBlendStateCreateInfo</type>
        <definition>VkPipelineColorBlendStateCreateInfo lava::render_pipeline::m_color_blend_state</definition>
        <argsstring></argsstring>
        <name>m_color_blend_state</name>
        <qualifiedname>lava::render_pipeline::m_color_blend_state</qualifiedname>
        <briefdescription>
<para>Pipeline color blend state create information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="443" column="41" bodyfile="liblava/block/render_pipeline.hpp" bodystart="443" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1render__pipeline_1a1dd72e8e2c61ed3f8749f043f5548422" prot="private" static="no" mutable="no">
        <type>VkPipelineDynamicStateCreateInfo</type>
        <definition>VkPipelineDynamicStateCreateInfo lava::render_pipeline::m_dynamic_state</definition>
        <argsstring></argsstring>
        <name>m_dynamic_state</name>
        <qualifiedname>lava::render_pipeline::m_dynamic_state</qualifiedname>
        <briefdescription>
<para>Pipeline dynamic state create information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="446" column="38" bodyfile="liblava/block/render_pipeline.hpp" bodystart="446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1render__pipeline_1a06b86372275082220fecc201153a7185" prot="private" static="no" mutable="no">
        <type><ref refid="base_2base_8hpp_1a740d0f8107af22a9f1dab998b0577a20" kindref="member">VkDynamicStates</ref></type>
        <definition>VkDynamicStates lava::render_pipeline::m_dynamic_states</definition>
        <argsstring></argsstring>
        <name>m_dynamic_states</name>
        <qualifiedname>lava::render_pipeline::m_dynamic_states</qualifiedname>
        <briefdescription>
<para>List of dynamic states. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="449" column="21" bodyfile="liblava/block/render_pipeline.hpp" bodystart="449" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1render__pipeline_1a254879aa4bded6032f2b26c5aedae604" prot="private" static="no" mutable="no">
        <type>shader_stage::s_list</type>
        <definition>shader_stage::s_list lava::render_pipeline::m_shader_stages</definition>
        <argsstring></argsstring>
        <name>m_shader_stages</name>
        <qualifiedname>lava::render_pipeline::m_shader_stages</qualifiedname>
        <briefdescription>
<para>List of shader stages. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="452" column="26" bodyfile="liblava/block/render_pipeline.hpp" bodystart="452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1render__pipeline_1a288e6769763e0204639113b9dc3692de" prot="private" static="no" mutable="no">
        <type><ref refid="structlava_1_1render__pipeline_1a43ef7c8f15057601584b8fd742164854" kindref="member">sizing_mode</ref></type>
        <definition>sizing_mode lava::render_pipeline::m_sizing</definition>
        <argsstring></argsstring>
        <name>m_sizing</name>
        <qualifiedname>lava::render_pipeline::m_sizing</qualifiedname>
        <initializer>= sizing_mode::input</initializer>
        <briefdescription>
<para>Sizing mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="455" column="17" bodyfile="liblava/block/render_pipeline.hpp" bodystart="455" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1render__pipeline_1a2872110121f32e1a14e495406fd7089e" prot="private" static="no" mutable="no">
        <type>VkViewport</type>
        <definition>VkViewport lava::render_pipeline::m_viewport</definition>
        <argsstring></argsstring>
        <name>m_viewport</name>
        <qualifiedname>lava::render_pipeline::m_viewport</qualifiedname>
        <briefdescription>
<para>Vulkan viewport. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="458" column="16" bodyfile="liblava/block/render_pipeline.hpp" bodystart="458" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1render__pipeline_1a45f880bd270648e1ff6eb7d779a038a4" prot="private" static="no" mutable="no">
        <type>VkRect2D</type>
        <definition>VkRect2D lava::render_pipeline::m_scissor</definition>
        <argsstring></argsstring>
        <name>m_scissor</name>
        <qualifiedname>lava::render_pipeline::m_scissor</qualifiedname>
        <briefdescription>
<para>Scissor rectangle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="461" column="14" bodyfile="liblava/block/render_pipeline.hpp" bodystart="461" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1render__pipeline_1a4c6ea85dbc6b4af2daff5999b6e49da3" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool lava::render_pipeline::m_auto_size</definition>
        <argsstring></argsstring>
        <name>m_auto_size</name>
        <qualifiedname>lava::render_pipeline::m_auto_size</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
<para>Auto size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="464" column="10" bodyfile="liblava/block/render_pipeline.hpp" bodystart="464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1render__pipeline_1a522348646d4f168384a7584717eaec39" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool lava::render_pipeline::m_auto_line_width_state</definition>
        <argsstring></argsstring>
        <name>m_auto_line_width_state</name>
        <qualifiedname>lava::render_pipeline::m_auto_line_width_state</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>Auto line width state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="467" column="10" bodyfile="liblava/block/render_pipeline.hpp" bodystart="467" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1render__pipeline_1a826fe0620c382ce0f85191bb2edb3eee" prot="private" static="no" mutable="no">
        <type><ref refid="types_8hpp_1a3a32680a459890aa9c80b4f5533b3b1f" kindref="member">r32</ref></type>
        <definition>r32 lava::render_pipeline::m_line_width</definition>
        <argsstring></argsstring>
        <name>m_line_width</name>
        <qualifiedname>lava::render_pipeline::m_line_width</qualifiedname>
        <initializer>= 1.f</initializer>
        <briefdescription>
<para>Line width. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="470" column="9" bodyfile="liblava/block/render_pipeline.hpp" bodystart="470" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a5dca6f73544060e70aaa4615bcb7e149" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structlava_1_1render__pipeline_1a7177a0f9ce21dd18b6f7befe611649dd" kindref="member">s_ptr</ref></type>
        <definition>static s_ptr lava::render_pipeline::make</definition>
        <argsstring>(device::ptr device, VkPipelineCache pipeline_cache=0)</argsstring>
        <name>make</name>
        <qualifiedname>lava::render_pipeline::make</qualifiedname>
        <param>
          <type><ref refid="structlava_1_1device_1a6f7d378ef30e7bf1cd4fe208de859250" kindref="member">device::ptr</ref></type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkPipelineCache</type>
          <declname>pipeline_cache</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Make a new render pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pipeline_cache</parametername>
</parameternamelist>
<parameterdescription>
<para>Pipeline cache </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>s_ptr Shared pointer to render pipeline </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="65" column="18" bodyfile="liblava/block/render_pipeline.hpp" bodystart="65" bodyend="68"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structlava_1_1render__pipeline_1abed61b0a0941d543d58556ba38e19de8" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>lava::render_pipeline::render_pipeline</definition>
        <argsstring>(device::ptr device, VkPipelineCache pipeline_cache)</argsstring>
        <name>render_pipeline</name>
        <qualifiedname>lava::render_pipeline::render_pipeline</qualifiedname>
        <param>
          <type><ref refid="structlava_1_1device_1a6f7d378ef30e7bf1cd4fe208de859250" kindref="member">device::ptr</ref></type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkPipelineCache</type>
          <declname>pipeline_cache</declname>
        </param>
        <briefdescription>
<para>Construct a new render pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pipeline_cache</parametername>
</parameternamelist>
<parameterdescription>
<para>Pipeline cache </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="75" column="14"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1ac25707c49c52b336b4378be0cf20f2f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::bind</definition>
        <argsstring>(VkCommandBuffer cmd_buf) override</argsstring>
        <name>bind</name>
        <qualifiedname>lava::render_pipeline::bind</qualifiedname>
        <reimplements refid="structlava_1_1pipeline_1a4fbab953063b31a88987dd050ee9289c">bind</reimplements>
        <param>
          <type>VkCommandBuffer</type>
          <declname>cmd_buf</declname>
        </param>
        <briefdescription>
<para>Bind the pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Command buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="82" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a170be5608339c844013ea87268496ab7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::set_viewport_and_scissor</definition>
        <argsstring>(VkCommandBuffer cmd_buf, uv2 size)</argsstring>
        <name>set_viewport_and_scissor</name>
        <qualifiedname>lava::render_pipeline::set_viewport_and_scissor</qualifiedname>
        <param>
          <type>VkCommandBuffer</type>
          <declname>cmd_buf</declname>
        </param>
        <param>
          <type><ref refid="math_8hpp_1ad63e913ea06491bbe4e45588b35587df" kindref="member">uv2</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set the viewport and scissor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Command buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Viewport and scissor size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="89" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a9125b66f8119fb023aea96d88df7069a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::set_render_pass</definition>
        <argsstring>(VkRenderPass pass)</argsstring>
        <name>set_render_pass</name>
        <qualifiedname>lava::render_pipeline::set_render_pass</qualifiedname>
        <param>
          <type>VkRenderPass</type>
          <declname>pass</declname>
        </param>
        <briefdescription>
<para>Set the render pass. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pass</parametername>
</parameternamelist>
<parameterdescription>
<para>Render pass </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="96" column="10" bodyfile="liblava/block/render_pipeline.hpp" bodystart="96" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a825d203316636a65fc89ce4e77604f4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::set</definition>
        <argsstring>(VkRenderPass pass)</argsstring>
        <name>set</name>
        <qualifiedname>lava::render_pipeline::set</qualifiedname>
        <param>
          <type>VkRenderPass</type>
          <declname>pass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structlava_1_1render__pipeline_1a9125b66f8119fb023aea96d88df7069a" kindref="member">set_render_pass</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="103" column="10" bodyfile="liblava/block/render_pipeline.hpp" bodystart="103" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a3f926281a1a8db17c28d672925d09917" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>VkRenderPass</type>
        <definition>VkRenderPass lava::render_pipeline::get_render_pass</definition>
        <argsstring>() const</argsstring>
        <name>get_render_pass</name>
        <qualifiedname>lava::render_pipeline::get_render_pass</qualifiedname>
        <briefdescription>
<para>Get the render pass. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>VkRenderPass Render pass </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="111" column="18" bodyfile="liblava/block/render_pipeline.hpp" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1aa04c6b340798dd733a646cf8dcd89cd9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="types_8hpp_1a2a40eb7fccb1ebcfd58d6d4b7a078e5c" kindref="member">index</ref></type>
        <definition>index lava::render_pipeline::get_subpass</definition>
        <argsstring>() const</argsstring>
        <name>get_subpass</name>
        <qualifiedname>lava::render_pipeline::get_subpass</qualifiedname>
        <briefdescription>
<para>Get the subpass. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>index Index of subpass </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="119" column="11" bodyfile="liblava/block/render_pipeline.hpp" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1acdfac26e8e3f113841d39f8e03c17f95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::set_subpass</definition>
        <argsstring>(index value)</argsstring>
        <name>set_subpass</name>
        <qualifiedname>lava::render_pipeline::set_subpass</qualifiedname>
        <param>
          <type><ref refid="types_8hpp_1a2a40eb7fccb1ebcfd58d6d4b7a078e5c" kindref="member">index</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the subpass. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of subpass </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="127" column="10" bodyfile="liblava/block/render_pipeline.hpp" bodystart="127" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a660eb808119f9dd75c4746c077dd55bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lava::render_pipeline::create</definition>
        <argsstring>(VkRenderPass pass)</argsstring>
        <name>create</name>
        <qualifiedname>lava::render_pipeline::create</qualifiedname>
        <param>
          <type>VkRenderPass</type>
          <declname>pass</declname>
        </param>
        <briefdescription>
<para>Create a new render pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pass</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan render pass </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Create was successful or failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="136" column="10" bodyfile="liblava/block/render_pipeline.hpp" bodystart="136" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a02be633100e9217d07ee12e749517983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::set_vertex_input_binding</definition>
        <argsstring>(VkVertexInputBindingDescription const &amp;description)</argsstring>
        <name>set_vertex_input_binding</name>
        <qualifiedname>lava::render_pipeline::set_vertex_input_binding</qualifiedname>
        <param>
          <type>VkVertexInputBindingDescription const &amp;</type>
          <declname>description</declname>
        </param>
        <briefdescription>
<para>Set the vertex input binding. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>Vertex input binding description </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="146" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a94dd28513d26e295107191fdc61a43b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::set_vertex_input_bindings</definition>
        <argsstring>(VkVertexInputBindingDescriptions const &amp;descriptions)</argsstring>
        <name>set_vertex_input_bindings</name>
        <qualifiedname>lava::render_pipeline::set_vertex_input_bindings</qualifiedname>
        <param>
          <type><ref refid="base_2base_8hpp_1a919bd0b8a2dfec094ec8cc718fdd0c9c" kindref="member">VkVertexInputBindingDescriptions</ref> const &amp;</type>
          <declname>descriptions</declname>
        </param>
        <briefdescription>
<para>Set the vertex input bindings. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>descriptions</parametername>
</parameternamelist>
<parameterdescription>
<para>List of vertex input binding descriptions </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="152" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a17dc53e5ea495ec3f2c55a6318133a74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::set_vertex_input_attribute</definition>
        <argsstring>(VkVertexInputAttributeDescription const &amp;attribute)</argsstring>
        <name>set_vertex_input_attribute</name>
        <qualifiedname>lava::render_pipeline::set_vertex_input_attribute</qualifiedname>
        <param>
          <type>VkVertexInputAttributeDescription const &amp;</type>
          <declname>attribute</declname>
        </param>
        <briefdescription>
<para>Set the vertex input attribute. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attribute</parametername>
</parameternamelist>
<parameterdescription>
<para>Vertex input attribute description </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="158" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1ab5a9c7b58eaf875a3eafb074390f45cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::set_vertex_input_attributes</definition>
        <argsstring>(VkVertexInputAttributeDescriptions const &amp;attributes)</argsstring>
        <name>set_vertex_input_attributes</name>
        <qualifiedname>lava::render_pipeline::set_vertex_input_attributes</qualifiedname>
        <param>
          <type><ref refid="base_2base_8hpp_1acede95ebeecb8bdd7a855ba1f2b518dc" kindref="member">VkVertexInputAttributeDescriptions</ref> const &amp;</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
<para>Set the vertex input attributes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>List of vertex input attributes descriptions </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="164" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a2981f314f630949ee0ad7c60f9bdc94f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::set_input_topology</definition>
        <argsstring>(VkPrimitiveTopology const &amp;topology)</argsstring>
        <name>set_input_topology</name>
        <qualifiedname>lava::render_pipeline::set_input_topology</qualifiedname>
        <param>
          <type>VkPrimitiveTopology const &amp;</type>
          <declname>topology</declname>
        </param>
        <briefdescription>
<para>Set the input assembler&apos;s topology. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>topology</parametername>
</parameternamelist>
<parameterdescription>
<para>Enum describing polygon primitives </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="170" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1afb0ee77020ccf384f037dd398e2fe062" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::set_depth_test_and_write</definition>
        <argsstring>(bool test_enable=true, bool write_enable=true)</argsstring>
        <name>set_depth_test_and_write</name>
        <qualifiedname>lava::render_pipeline::set_depth_test_and_write</qualifiedname>
        <param>
          <type>bool</type>
          <declname>test_enable</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>write_enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set the depth test and write. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>test_enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable depth test </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable depth write </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="177" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1aea52a9c440f49cf2cecd24e2d1c76ceb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::set_depth_compare_op</definition>
        <argsstring>(VkCompareOp compare_op)</argsstring>
        <name>set_depth_compare_op</name>
        <qualifiedname>lava::render_pipeline::set_depth_compare_op</qualifiedname>
        <param>
          <type>VkCompareOp</type>
          <declname>compare_op</declname>
        </param>
        <briefdescription>
<para>Set the depth compare operation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compare_op</parametername>
</parameternamelist>
<parameterdescription>
<para>Depth compare operation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="184" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1ac353be65210d25da3ee2eba1f452d124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::set_rasterization_cull_mode</definition>
        <argsstring>(VkCullModeFlags cull_mode)</argsstring>
        <name>set_rasterization_cull_mode</name>
        <qualifiedname>lava::render_pipeline::set_rasterization_cull_mode</qualifiedname>
        <param>
          <type>VkCullModeFlags</type>
          <declname>cull_mode</declname>
        </param>
        <briefdescription>
<para>Set the rasterization cull mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cull_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Cull mode flags </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="190" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a83356c8a9af9a6b02bcd583ce00d21f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::set_rasterization_front_face</definition>
        <argsstring>(VkFrontFace front_face)</argsstring>
        <name>set_rasterization_front_face</name>
        <qualifiedname>lava::render_pipeline::set_rasterization_front_face</qualifiedname>
        <param>
          <type>VkFrontFace</type>
          <declname>front_face</declname>
        </param>
        <briefdescription>
<para>Set the rasterization front face. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>front_face</parametername>
</parameternamelist>
<parameterdescription>
<para>Front face </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="196" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a1d5b4a6ce63e3289c5f31a02ae9be192" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::set_rasterization_polygon_mode</definition>
        <argsstring>(VkPolygonMode polygon_mode)</argsstring>
        <name>set_rasterization_polygon_mode</name>
        <qualifiedname>lava::render_pipeline::set_rasterization_polygon_mode</qualifiedname>
        <param>
          <type>VkPolygonMode</type>
          <declname>polygon_mode</declname>
        </param>
        <briefdescription>
<para>Set the rasterization polygon mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polygon_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Polygon mode </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="202" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a9e3ad997caa0c13b76dd40c9a008bd4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::add_color_blend_attachment</definition>
        <argsstring>(VkPipelineColorBlendAttachmentState const &amp;attachment)</argsstring>
        <name>add_color_blend_attachment</name>
        <qualifiedname>lava::render_pipeline::add_color_blend_attachment</qualifiedname>
        <param>
          <type>VkPipelineColorBlendAttachmentState const &amp;</type>
          <declname>attachment</declname>
        </param>
        <briefdescription>
<para>Add color blend attachment. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attachment</parametername>
</parameternamelist>
<parameterdescription>
<para>Pipeline color blend attachment state </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="208" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a4479f36baa91cd599ac0d65e1f1ba172" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::add_color_blend_attachment</definition>
        <argsstring>()</argsstring>
        <name>add_color_blend_attachment</name>
        <qualifiedname>lava::render_pipeline::add_color_blend_attachment</qualifiedname>
        <briefdescription>
<para>Add color blend attachment (default) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="213" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a9e9dec54688210a262e34094dd5ba7e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::clear_color_blend_attachment</definition>
        <argsstring>()</argsstring>
        <name>clear_color_blend_attachment</name>
        <qualifiedname>lava::render_pipeline::clear_color_blend_attachment</qualifiedname>
        <briefdescription>
<para>Clear color blend attachment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="218" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1aa8e5c27b82d8422d925cb01f077cbc82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::set_dynamic_states</definition>
        <argsstring>(VkDynamicStates const &amp;states)</argsstring>
        <name>set_dynamic_states</name>
        <qualifiedname>lava::render_pipeline::set_dynamic_states</qualifiedname>
        <param>
          <type><ref refid="base_2base_8hpp_1a740d0f8107af22a9f1dab998b0577a20" kindref="member">VkDynamicStates</ref> const &amp;</type>
          <declname>states</declname>
        </param>
        <briefdescription>
<para>Set the dynamic states. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>states</parametername>
</parameternamelist>
<parameterdescription>
<para>List of dynamic states </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="224" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1aab3478339d282df86b77a57b03ea4a0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::add_dynamic_state</definition>
        <argsstring>(VkDynamicState state)</argsstring>
        <name>add_dynamic_state</name>
        <qualifiedname>lava::render_pipeline::add_dynamic_state</qualifiedname>
        <param>
          <type>VkDynamicState</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Add a dynamic state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>Dynamic state </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="230" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a4f0973d34436bf48733193f4c32ee198" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::clear_dynamic_states</definition>
        <argsstring>()</argsstring>
        <name>clear_dynamic_states</name>
        <qualifiedname>lava::render_pipeline::clear_dynamic_states</qualifiedname>
        <briefdescription>
<para>Clear dynamic states. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="235" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a16a53a661bc777e439a5d966e1ef761f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lava::render_pipeline::add_shader_stage</definition>
        <argsstring>(c_data::ref data, VkShaderStageFlagBits stage)</argsstring>
        <name>add_shader_stage</name>
        <qualifiedname>lava::render_pipeline::add_shader_stage</qualifiedname>
        <param>
          <type><ref refid="structlava_1_1c__data_1af79805daac5977755e5636b86b97c9d6" kindref="member">c_data::ref</ref></type>
          <declname>data</declname>
        </param>
        <param>
          <type>VkShaderStageFlagBits</type>
          <declname>stage</declname>
        </param>
        <briefdescription>
<para>Add shader stage. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Shader data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stage</parametername>
</parameternamelist>
<parameterdescription>
<para>Shader stage flag bits </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Add was successful or failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="243" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1abae1b27d8f0055bb4e1f563640a2e17a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lava::render_pipeline::add_shader</definition>
        <argsstring>(c_data::ref data, VkShaderStageFlagBits stage)</argsstring>
        <name>add_shader</name>
        <qualifiedname>lava::render_pipeline::add_shader</qualifiedname>
        <param>
          <type><ref refid="structlava_1_1c__data_1af79805daac5977755e5636b86b97c9d6" kindref="member">c_data::ref</ref></type>
          <declname>data</declname>
        </param>
        <param>
          <type>VkShaderStageFlagBits</type>
          <declname>stage</declname>
        </param>
        <briefdescription>
<para>Add shader. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Shader data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stage</parametername>
</parameternamelist>
<parameterdescription>
<para>Shader stage flag bits </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Add was successful or failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="252" column="10" bodyfile="liblava/block/render_pipeline.hpp" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a379774c5334a0c863857440b43f94f8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::add</definition>
        <argsstring>(shader_stage::s_ptr const &amp;shader_stage)</argsstring>
        <name>add</name>
        <qualifiedname>lava::render_pipeline::add</qualifiedname>
        <param>
          <type>shader_stage::s_ptr const &amp;</type>
          <declname>shader_stage</declname>
        </param>
        <briefdescription>
<para>Add shader stage. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shader_stage</parametername>
</parameternamelist>
<parameterdescription>
<para>Shader stage </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="261" column="10" bodyfile="liblava/block/render_pipeline.hpp" bodystart="261" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a2f148bc864aa9344b6b9762ad990b7be" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>shader_stage::s_list const &amp;</type>
        <definition>shader_stage::s_list const  &amp; lava::render_pipeline::get_shader_stages</definition>
        <argsstring>() const</argsstring>
        <name>get_shader_stages</name>
        <qualifiedname>lava::render_pipeline::get_shader_stages</qualifiedname>
        <briefdescription>
<para>Get the shader stages. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>shader_stage::s_list const&amp; List of shader stages </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="269" column="32" bodyfile="liblava/block/render_pipeline.hpp" bodystart="269" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a91cca009ae780f380f0ad06f54a60338" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::clear_shader_stages</definition>
        <argsstring>()</argsstring>
        <name>clear_shader_stages</name>
        <qualifiedname>lava::render_pipeline::clear_shader_stages</qualifiedname>
        <briefdescription>
<para>Clear the shader stages. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="276" column="10" bodyfile="liblava/block/render_pipeline.hpp" bodystart="276" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a26de14bf8d76148a444e72f0a007ab73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>lava::render_pipeline::clear</qualifiedname>
        <briefdescription>
<para>Clear the render pipeline. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="283" column="10" bodyfile="liblava/block/render_pipeline.hpp" bodystart="283" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a9022de8c930cef11eccaba24322a9ce0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::set_auto_size</definition>
        <argsstring>(bool value=true)</argsstring>
        <name>set_auto_size</name>
        <qualifiedname>lava::render_pipeline::set_auto_size</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set the auto size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable state </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="292" column="10" bodyfile="liblava/block/render_pipeline.hpp" bodystart="292" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1aeaa26f036a67231793c829ff0fc98d9c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lava::render_pipeline::auto_sizing</definition>
        <argsstring>() const</argsstring>
        <name>auto_sizing</name>
        <qualifiedname>lava::render_pipeline::auto_sizing</qualifiedname>
        <briefdescription>
<para>Get the auto sizing state. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Auto sizing is enabled or not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="300" column="10" bodyfile="liblava/block/render_pipeline.hpp" bodystart="300" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a40834526d66ebed580971cabbb2f5092" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>VkViewport</type>
        <definition>VkViewport lava::render_pipeline::get_viewport</definition>
        <argsstring>() const</argsstring>
        <name>get_viewport</name>
        <qualifiedname>lava::render_pipeline::get_viewport</qualifiedname>
        <briefdescription>
<para>Get the viewport. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>VkViewport Vulkan viewport </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="308" column="16" bodyfile="liblava/block/render_pipeline.hpp" bodystart="308" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1ada1d689990a9bda99285c6737f642b5c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::set_viewport</definition>
        <argsstring>(VkViewport value)</argsstring>
        <name>set_viewport</name>
        <qualifiedname>lava::render_pipeline::set_viewport</qualifiedname>
        <param>
          <type>VkViewport</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the viewport. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Vulkan viewport </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="316" column="10" bodyfile="liblava/block/render_pipeline.hpp" bodystart="316" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a1ffcbc725190ad1f2a83b9b7f0a9f157" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>VkRect2D</type>
        <definition>VkRect2D lava::render_pipeline::get_scissor</definition>
        <argsstring>() const</argsstring>
        <name>get_scissor</name>
        <qualifiedname>lava::render_pipeline::get_scissor</qualifiedname>
        <briefdescription>
<para>Get the scissor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>VkRect2D Scissor rectangle </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="324" column="14" bodyfile="liblava/block/render_pipeline.hpp" bodystart="324" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a6b8a0d88c38030245e4284a184ead068" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::set_scissor</definition>
        <argsstring>(VkRect2D value)</argsstring>
        <name>set_scissor</name>
        <qualifiedname>lava::render_pipeline::set_scissor</qualifiedname>
        <param>
          <type>VkRect2D</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the scissor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Scissor rectangle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="332" column="10" bodyfile="liblava/block/render_pipeline.hpp" bodystart="332" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a6099e71d7d246d8f9885fa8aab5d87a1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structlava_1_1render__pipeline_1a43ef7c8f15057601584b8fd742164854" kindref="member">sizing_mode</ref></type>
        <definition>sizing_mode lava::render_pipeline::get_sizing</definition>
        <argsstring>() const</argsstring>
        <name>get_sizing</name>
        <qualifiedname>lava::render_pipeline::get_sizing</qualifiedname>
        <briefdescription>
<para>Get the sizing. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>sizing_mode Sizing mode </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="340" column="17" bodyfile="liblava/block/render_pipeline.hpp" bodystart="340" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a96d6aabf5799071b5ba08c0c9ac8fae1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::set_sizing</definition>
        <argsstring>(sizing_mode value)</argsstring>
        <name>set_sizing</name>
        <qualifiedname>lava::render_pipeline::set_sizing</qualifiedname>
        <param>
          <type><ref refid="structlava_1_1render__pipeline_1a43ef7c8f15057601584b8fd742164854" kindref="member">sizing_mode</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the sizing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Sizing mode </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="348" column="10" bodyfile="liblava/block/render_pipeline.hpp" bodystart="348" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1afd3b3fe3767f062203f3a43a28edd3e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::copy_to</definition>
        <argsstring>(render_pipeline *target) const</argsstring>
        <name>copy_to</name>
        <qualifiedname>lava::render_pipeline::copy_to</qualifiedname>
        <param>
          <type><ref refid="structlava_1_1render__pipeline" kindref="compound">render_pipeline</ref> *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Copy pipeline configuration to target. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Render pipeline </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="356" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1aabac53f179ff1bc32ffd710546a99e9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::copy_from</definition>
        <argsstring>(s_ptr const &amp;source)</argsstring>
        <name>copy_from</name>
        <qualifiedname>lava::render_pipeline::copy_from</qualifiedname>
        <param>
          <type><ref refid="structlava_1_1render__pipeline_1a7177a0f9ce21dd18b6f7befe611649dd" kindref="member">s_ptr</ref> const &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Copy pipeline configuration from source. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Render pipeline </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="362" column="10" bodyfile="liblava/block/render_pipeline.hpp" bodystart="362" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a5edb6d40a7e3a342a268b0c196a64b52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::set_line_width</definition>
        <argsstring>(r32 value)</argsstring>
        <name>set_line_width</name>
        <qualifiedname>lava::render_pipeline::set_line_width</qualifiedname>
        <param>
          <type><ref refid="types_8hpp_1a3a32680a459890aa9c80b4f5533b3b1f" kindref="member">r32</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the line width. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Line width </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="370" column="10" bodyfile="liblava/block/render_pipeline.hpp" bodystart="370" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a504dea5db14385f7da98372c8e13f292" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="types_8hpp_1a3a32680a459890aa9c80b4f5533b3b1f" kindref="member">r32</ref></type>
        <definition>r32 lava::render_pipeline::get_line_width</definition>
        <argsstring>() const</argsstring>
        <name>get_line_width</name>
        <qualifiedname>lava::render_pipeline::get_line_width</qualifiedname>
        <briefdescription>
<para>Get the line width. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>r32 Line width </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="378" column="9" bodyfile="liblava/block/render_pipeline.hpp" bodystart="378" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1a340172af373eb0c781474a9d5923647a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lava::render_pipeline::auto_line_width</definition>
        <argsstring>() const</argsstring>
        <name>auto_line_width</name>
        <qualifiedname>lava::render_pipeline::auto_line_width</qualifiedname>
        <briefdescription>
<para>Check if auto line width is active. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Auto line width is enabled or not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="386" column="10" bodyfile="liblava/block/render_pipeline.hpp" bodystart="386" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1aaba1eaa38e17f7888929f00ff4b0e9e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::set_auto_line_width</definition>
        <argsstring>(bool value=true)</argsstring>
        <name>set_auto_line_width</name>
        <qualifiedname>lava::render_pipeline::set_auto_line_width</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set the auto line width. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable state </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="394" column="10" bodyfile="liblava/block/render_pipeline.hpp" bodystart="394" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1adba045007d3130c8625c170dd7485e20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::set_line_width</definition>
        <argsstring>(VkCommandBuffer cmd_buf)</argsstring>
        <name>set_line_width</name>
        <qualifiedname>lava::render_pipeline::set_line_width</qualifiedname>
        <param>
          <type>VkCommandBuffer</type>
          <declname>cmd_buf</declname>
        </param>
        <briefdescription>
<para>Set the line width. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Command buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="402" column="10" bodyfile="liblava/block/render_pipeline.hpp" bodystart="402" bodyend="404"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="structlava_1_1render__pipeline_1addd3f55aaf896310f9eab8167e6aa74e" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool lava::render_pipeline::setup</definition>
        <argsstring>() override</argsstring>
        <name>setup</name>
        <qualifiedname>lava::render_pipeline::setup</qualifiedname>
        <reimplements refid="structlava_1_1pipeline_1a1e10d18f9f3eaeece74d6110f6b1b59e">setup</reimplements>
        <briefdescription>
<para>Set up the render pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Setup was successful or failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="417" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1render__pipeline_1ab8c0b1db66d29f98d2432189bfddcde9" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void lava::render_pipeline::teardown</definition>
        <argsstring>() override</argsstring>
        <name>teardown</name>
        <qualifiedname>lava::render_pipeline::teardown</qualifiedname>
        <reimplements refid="structlava_1_1pipeline_1a0e1556ac325e63b3c5f0e705bfbf42d3">teardown</reimplements>
        <briefdescription>
<para>Tear down the render pipeline. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/block/render_pipeline.hpp" line="422" column="10"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Render pipeline (Graphics) </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>lava::entity</label>
        <link refid="structlava_1_1entity"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>lava::interface</label>
        <link refid="structlava_1_1interface"/>
      </node>
      <node id="4">
        <label>lava::no_copy_no_move</label>
        <link refid="structlava_1_1no__copy__no__move"/>
      </node>
      <node id="2">
        <label>lava::pipeline</label>
        <link refid="structlava_1_1pipeline"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>lava::render_pipeline</label>
        <link refid="structlava_1_1render__pipeline"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>lava::device</label>
        <link refid="structlava_1_1device"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>lava::device_table</label>
        <link refid="structlava_1_1device__table"/>
      </node>
      <node id="3">
        <label>lava::entity</label>
        <link refid="structlava_1_1entity"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>lava::interface</label>
        <link refid="structlava_1_1interface"/>
      </node>
      <node id="4">
        <label>lava::no_copy_no_move</label>
        <link refid="structlava_1_1no__copy__no__move"/>
      </node>
      <node id="2">
        <label>lava::pipeline</label>
        <link refid="structlava_1_1pipeline"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_device</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>lava::render_pipeline</label>
        <link refid="structlava_1_1render__pipeline"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="liblava/block/render_pipeline.hpp" line="17" column="1" bodyfile="liblava/block/render_pipeline.hpp" bodystart="17" bodyend="471"/>
    <listofallmembers>
      <member refid="structlava_1_1pipeline_1af1ed6d08db3d755b3011fcb8b423f416" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>activated</name></member>
      <member refid="structlava_1_1render__pipeline_1a379774c5334a0c863857440b43f94f8c" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>add</name></member>
      <member refid="structlava_1_1render__pipeline_1a9e3ad997caa0c13b76dd40c9a008bd4e" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>add_color_blend_attachment</name></member>
      <member refid="structlava_1_1render__pipeline_1a4479f36baa91cd599ac0d65e1f1ba172" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>add_color_blend_attachment</name></member>
      <member refid="structlava_1_1render__pipeline_1aab3478339d282df86b77a57b03ea4a0c" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>add_dynamic_state</name></member>
      <member refid="structlava_1_1render__pipeline_1abae1b27d8f0055bb4e1f563640a2e17a" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>add_shader</name></member>
      <member refid="structlava_1_1render__pipeline_1a16a53a661bc777e439a5d966e1ef761f" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>add_shader_stage</name></member>
      <member refid="structlava_1_1pipeline_1a102ce500ee05cfdf242423703188b9d7" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>auto_bind</name></member>
      <member refid="structlava_1_1render__pipeline_1a340172af373eb0c781474a9d5923647a" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>auto_line_width</name></member>
      <member refid="structlava_1_1render__pipeline_1aeaa26f036a67231793c829ff0fc98d9c" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>auto_sizing</name></member>
      <member refid="structlava_1_1render__pipeline_1ac25707c49c52b336b4378be0cf20f2f4" prot="public" virt="virtual"><scope>lava::render_pipeline</scope><name>bind</name></member>
      <member refid="structlava_1_1render__pipeline_1a26de14bf8d76148a444e72f0a007ab73" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>clear</name></member>
      <member refid="structlava_1_1render__pipeline_1a9e9dec54688210a262e34094dd5ba7e4" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>clear_color_blend_attachment</name></member>
      <member refid="structlava_1_1render__pipeline_1a4f0973d34436bf48733193f4c32ee198" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>clear_dynamic_states</name></member>
      <member refid="structlava_1_1render__pipeline_1a91cca009ae780f380f0ad06f54a60338" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>clear_shader_stages</name></member>
      <member refid="structlava_1_1render__pipeline_1aabac53f179ff1bc32ffd710546a99e9e" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>copy_from</name></member>
      <member refid="structlava_1_1render__pipeline_1afd3b3fe3767f062203f3a43a28edd3e4" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>copy_to</name></member>
      <member refid="structlava_1_1render__pipeline_1a660eb808119f9dd75c4746c077dd55bf" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>create</name></member>
      <member refid="structlava_1_1pipeline_1a9efe4f61250e2e1cca7d64530691eab0" prot="public" virt="non-virtual" ambiguityscope="lava::pipeline::"><scope>lava::render_pipeline</scope><name>create</name></member>
      <member refid="structlava_1_1render__pipeline_1a19085363b6b94d74bd7ee809f7b4e885" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>create_func</name></member>
      <member refid="structlava_1_1pipeline_1ad75a43fefcc8feae90feee4e0ccf097b" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>destroy</name></member>
      <member refid="structlava_1_1entity_1a39066de3954adf265c61c28f0a3b521c" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>entity</name></member>
      <member refid="structlava_1_1pipeline_1a3e37bdce392138b2058e7a811fcbcbb9" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>get</name></member>
      <member refid="structlava_1_1pipeline_1a26ba013d7a0d579a4c12ff4d221249cb" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>get_device</name></member>
      <member refid="structlava_1_1entity_1adfe6db1cb4d47cd34c36d3225e3571b7" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>get_id</name></member>
      <member refid="structlava_1_1pipeline_1a823e84dc3b4d26211e1cccad7d74918b" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>get_layout</name></member>
      <member refid="structlava_1_1render__pipeline_1a504dea5db14385f7da98372c8e13f292" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>get_line_width</name></member>
      <member refid="structlava_1_1render__pipeline_1a3f926281a1a8db17c28d672925d09917" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>get_render_pass</name></member>
      <member refid="structlava_1_1render__pipeline_1a1ffcbc725190ad1f2a83b9b7f0a9f157" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>get_scissor</name></member>
      <member refid="structlava_1_1render__pipeline_1a2f148bc864aa9344b6b9762ad990b7be" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>get_shader_stages</name></member>
      <member refid="structlava_1_1render__pipeline_1a6099e71d7d246d8f9885fa8aab5d87a1" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>get_sizing</name></member>
      <member refid="structlava_1_1render__pipeline_1aa04c6b340798dd733a646cf8dcd89cd9" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>get_subpass</name></member>
      <member refid="structlava_1_1render__pipeline_1a40834526d66ebed580971cabbb2f5092" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>get_viewport</name></member>
      <member refid="structlava_1_1render__pipeline_1a522348646d4f168384a7584717eaec39" prot="private" virt="non-virtual"><scope>lava::render_pipeline</scope><name>m_auto_line_width_state</name></member>
      <member refid="structlava_1_1render__pipeline_1a4c6ea85dbc6b4af2daff5999b6e49da3" prot="private" virt="non-virtual"><scope>lava::render_pipeline</scope><name>m_auto_size</name></member>
      <member refid="structlava_1_1render__pipeline_1a3c75d0d4ececfd11c862325d7c465cee" prot="private" virt="non-virtual"><scope>lava::render_pipeline</scope><name>m_color_blend_attachment_states</name></member>
      <member refid="structlava_1_1render__pipeline_1a5472f0fbd8c04145a8666f8b3d2a5caa" prot="private" virt="non-virtual"><scope>lava::render_pipeline</scope><name>m_color_blend_state</name></member>
      <member refid="structlava_1_1pipeline_1a8a72b44697ce13c68e3423180ca5c218" prot="protected" virt="non-virtual"><scope>lava::render_pipeline</scope><name>m_device</name></member>
      <member refid="structlava_1_1render__pipeline_1a1dd72e8e2c61ed3f8749f043f5548422" prot="private" virt="non-virtual"><scope>lava::render_pipeline</scope><name>m_dynamic_state</name></member>
      <member refid="structlava_1_1render__pipeline_1a06b86372275082220fecc201153a7185" prot="private" virt="non-virtual"><scope>lava::render_pipeline</scope><name>m_dynamic_states</name></member>
      <member refid="structlava_1_1render__pipeline_1a7646c3d47bce884a6335aab5354810a4" prot="private" virt="non-virtual"><scope>lava::render_pipeline</scope><name>m_info</name></member>
      <member refid="structlava_1_1pipeline_1ae7a2117e4f94e470e051852ea7dc7c3c" prot="protected" virt="non-virtual"><scope>lava::render_pipeline</scope><name>m_layout</name></member>
      <member refid="structlava_1_1render__pipeline_1a826fe0620c382ce0f85191bb2edb3eee" prot="private" virt="non-virtual"><scope>lava::render_pipeline</scope><name>m_line_width</name></member>
      <member refid="structlava_1_1pipeline_1a63c6f7a69bdc7ea1c56e955a32029e6c" prot="protected" virt="non-virtual"><scope>lava::render_pipeline</scope><name>m_pipeline_cache</name></member>
      <member refid="structlava_1_1render__pipeline_1a1579595b69d4e060fee1d3a5744f7fb5" prot="private" virt="non-virtual"><scope>lava::render_pipeline</scope><name>m_render_pass</name></member>
      <member refid="structlava_1_1render__pipeline_1a45f880bd270648e1ff6eb7d779a038a4" prot="private" virt="non-virtual"><scope>lava::render_pipeline</scope><name>m_scissor</name></member>
      <member refid="structlava_1_1render__pipeline_1a254879aa4bded6032f2b26c5aedae604" prot="private" virt="non-virtual"><scope>lava::render_pipeline</scope><name>m_shader_stages</name></member>
      <member refid="structlava_1_1render__pipeline_1a288e6769763e0204639113b9dc3692de" prot="private" virt="non-virtual"><scope>lava::render_pipeline</scope><name>m_sizing</name></member>
      <member refid="structlava_1_1render__pipeline_1a6b09ddfb109535bb27b12dde0288f34e" prot="private" virt="non-virtual"><scope>lava::render_pipeline</scope><name>m_subpass</name></member>
      <member refid="structlava_1_1render__pipeline_1a1b30d2350c7e208a12634dd0e1611578" prot="private" virt="non-virtual"><scope>lava::render_pipeline</scope><name>m_vertex_input_attributes</name></member>
      <member refid="structlava_1_1render__pipeline_1a514632ad39910470f0f54b7952d9b6d5" prot="private" virt="non-virtual"><scope>lava::render_pipeline</scope><name>m_vertex_input_bindings</name></member>
      <member refid="structlava_1_1render__pipeline_1a2872110121f32e1a14e495406fd7089e" prot="private" virt="non-virtual"><scope>lava::render_pipeline</scope><name>m_viewport</name></member>
      <member refid="structlava_1_1pipeline_1a278f28e7409250e047736c3f10a54837" prot="protected" virt="non-virtual"><scope>lava::render_pipeline</scope><name>m_vk_pipeline</name></member>
      <member refid="structlava_1_1render__pipeline_1a5dca6f73544060e70aaa4615bcb7e149" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>make</name></member>
      <member refid="structlava_1_1no__copy__no__move_1ac97369ee1b1a70996ab3b9b24bf26432" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>no_copy_no_move</name></member>
      <member refid="structlava_1_1no__copy__no__move_1a7942908379614cbb8d6260192d76347c" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>no_copy_no_move</name></member>
      <member refid="structlava_1_1render__pipeline_1a8a5f79ab779d12b67c79c008694157b6" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>on_create</name></member>
      <member refid="structlava_1_1pipeline_1a27840fc2c5f4ea19de106acc6fe631cc" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>on_process</name></member>
      <member refid="structlava_1_1no__copy__no__move_1aa3211995685035c9ca4d0a3a7e4b5ac8" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>operator=</name></member>
      <member refid="structlava_1_1pipeline_1a532e33a3caacd4f71ba16d26111a0c5b" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>pipeline</name></member>
      <member refid="structlava_1_1pipeline_1a2cdd9f46ddc9b493421680c53a2a5f68" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>process_func</name></member>
      <member refid="structlava_1_1pipeline_1a9246051bc496565d046631ac64cd8a26" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>ready</name></member>
      <member refid="structlava_1_1render__pipeline_1abed61b0a0941d543d58556ba38e19de8" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>render_pipeline</name></member>
      <member refid="structlava_1_1render__pipeline_1a4c7ab3e77536e3ab07b747165925e47c" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>s_list</name></member>
      <member refid="structlava_1_1render__pipeline_1ae61c7a20a6291d9e2cd16b3b85072a73" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>s_map</name></member>
      <member refid="structlava_1_1render__pipeline_1a7177a0f9ce21dd18b6f7befe611649dd" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>s_ptr</name></member>
      <member refid="structlava_1_1render__pipeline_1a825d203316636a65fc89ce4e77604f4d" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>set</name></member>
      <member refid="structlava_1_1pipeline_1a8917bd488924a0c7c509535ac6d45769" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>set_active</name></member>
      <member refid="structlava_1_1pipeline_1ad5b46469c6de88ce4bde0f9cbff570b4" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>set_auto_bind</name></member>
      <member refid="structlava_1_1render__pipeline_1aaba1eaa38e17f7888929f00ff4b0e9e9" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>set_auto_line_width</name></member>
      <member refid="structlava_1_1render__pipeline_1a9022de8c930cef11eccaba24322a9ce0" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>set_auto_size</name></member>
      <member refid="structlava_1_1render__pipeline_1aea52a9c440f49cf2cecd24e2d1c76ceb" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>set_depth_compare_op</name></member>
      <member refid="structlava_1_1render__pipeline_1afb0ee77020ccf384f037dd398e2fe062" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>set_depth_test_and_write</name></member>
      <member refid="structlava_1_1render__pipeline_1aa8e5c27b82d8422d925cb01f077cbc82" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>set_dynamic_states</name></member>
      <member refid="structlava_1_1render__pipeline_1a2981f314f630949ee0ad7c60f9bdc94f" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>set_input_topology</name></member>
      <member refid="structlava_1_1pipeline_1a5300f14b8065ad8b1fba7cd1bd7a68a4" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>set_layout</name></member>
      <member refid="structlava_1_1render__pipeline_1a5edb6d40a7e3a342a268b0c196a64b52" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>set_line_width</name></member>
      <member refid="structlava_1_1render__pipeline_1adba045007d3130c8625c170dd7485e20" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>set_line_width</name></member>
      <member refid="structlava_1_1render__pipeline_1ac353be65210d25da3ee2eba1f452d124" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>set_rasterization_cull_mode</name></member>
      <member refid="structlava_1_1render__pipeline_1a83356c8a9af9a6b02bcd583ce00d21f3" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>set_rasterization_front_face</name></member>
      <member refid="structlava_1_1render__pipeline_1a1d5b4a6ce63e3289c5f31a02ae9be192" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>set_rasterization_polygon_mode</name></member>
      <member refid="structlava_1_1render__pipeline_1a9125b66f8119fb023aea96d88df7069a" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>set_render_pass</name></member>
      <member refid="structlava_1_1render__pipeline_1a6b8a0d88c38030245e4284a184ead068" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>set_scissor</name></member>
      <member refid="structlava_1_1render__pipeline_1a96d6aabf5799071b5ba08c0c9ac8fae1" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>set_sizing</name></member>
      <member refid="structlava_1_1render__pipeline_1acdfac26e8e3f113841d39f8e03c17f95" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>set_subpass</name></member>
      <member refid="structlava_1_1render__pipeline_1a17dc53e5ea495ec3f2c55a6318133a74" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>set_vertex_input_attribute</name></member>
      <member refid="structlava_1_1render__pipeline_1ab5a9c7b58eaf875a3eafb074390f45cf" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>set_vertex_input_attributes</name></member>
      <member refid="structlava_1_1render__pipeline_1a02be633100e9217d07ee12e749517983" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>set_vertex_input_binding</name></member>
      <member refid="structlava_1_1render__pipeline_1a94dd28513d26e295107191fdc61a43b2" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>set_vertex_input_bindings</name></member>
      <member refid="structlava_1_1render__pipeline_1ada1d689990a9bda99285c6737f642b5c" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>set_viewport</name></member>
      <member refid="structlava_1_1render__pipeline_1a170be5608339c844013ea87268496ab7" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>set_viewport_and_scissor</name></member>
      <member refid="structlava_1_1render__pipeline_1addd3f55aaf896310f9eab8167e6aa74e" prot="private" virt="virtual"><scope>lava::render_pipeline</scope><name>setup</name></member>
      <member refid="structlava_1_1render__pipeline_1a43ef7c8f15057601584b8fd742164854" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>sizing_mode</name></member>
      <member refid="structlava_1_1render__pipeline_1ab8c0b1db66d29f98d2432189bfddcde9" prot="private" virt="virtual"><scope>lava::render_pipeline</scope><name>teardown</name></member>
      <member refid="structlava_1_1pipeline_1acd76893861c4cfd8f840280613d3479f" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>toggle</name></member>
      <member refid="structlava_1_1interface_1a9b6fe12d71f6da5dea89d44c62a5a046" prot="public" virt="virtual"><scope>lava::render_pipeline</scope><name>~interface</name></member>
      <member refid="structlava_1_1pipeline_1aa558324b8630b342dd0ece7dadaae821" prot="public" virt="non-virtual"><scope>lava::render_pipeline</scope><name>~pipeline</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
