<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="structlava_1_1frame" kind="struct" language="C++" prot="public">
    <compoundname>lava::frame</compoundname>
    <basecompoundref refid="structlava_1_1interface" prot="public" virt="non-virtual">lava::interface</basecompoundref>
    <basecompoundref refid="structlava_1_1no__copy__no__move" prot="public" virt="non-virtual">lava::no_copy_no_move</basecompoundref>
    <derivedcompoundref refid="structlava_1_1app" prot="public" virt="non-virtual">lava::app</derivedcompoundref>
    <includes refid="frame_2frame_8hpp" local="no">frame.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structlava_1_1frame_1adaea615ada78d449d51078340bbd05fd" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="structlava_1_1frame" kindref="compound">frame</ref> &gt;</type>
        <definition>using lava::frame::s_ptr =  std::shared_ptr&lt;frame&gt;</definition>
        <argsstring></argsstring>
        <name>s_ptr</name>
        <qualifiedname>lava::frame::s_ptr</qualifiedname>
        <briefdescription>
<para>Shared pointer to framework. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="100" column="5" bodyfile="liblava/frame/frame.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structlava_1_1frame_1ac3d3f9da01ee70a15024a715c7523635" prot="public" static="no">
        <type><ref refid="types_8hpp_1a7e5d7f16aff5126a54243302372b43b1" kindref="member">i32</ref></type>
        <definition>using lava::frame::result =  i32</definition>
        <argsstring></argsstring>
        <name>result</name>
        <qualifiedname>lava::frame::result</qualifiedname>
        <briefdescription>
<para>Framework result. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="128" column="5" bodyfile="liblava/frame/frame.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structlava_1_1frame_1ad4239b17e8ea083fd2e26055a2053dd8" prot="public" static="no">
        <type>std::function&lt; bool(<ref refid="structlava_1_1id_1a226df789a94177f765bdcaac2988eda0" kindref="member">id::ref</ref>)&gt;</type>
        <definition>using lava::frame::run_func =  std::function&lt;bool(id::ref)&gt;</definition>
        <argsstring></argsstring>
        <name>run_func</name>
        <qualifiedname>lava::frame::run_func</qualifiedname>
        <briefdescription>
<para>Run function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="143" column="5" bodyfile="liblava/frame/frame.hpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structlava_1_1frame_1a1baf2b13b19143c32816bcec0dc44e1a" prot="public" static="no">
        <type><ref refid="structlava_1_1frame_1ad4239b17e8ea083fd2e26055a2053dd8" kindref="member">run_func</ref> const  &amp;</type>
        <definition>using lava::frame::run_func_ref =  run_func const&amp;</definition>
        <argsstring></argsstring>
        <name>run_func_ref</name>
        <qualifiedname>lava::frame::run_func_ref</qualifiedname>
        <briefdescription>
<para>Reference to run function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="146" column="5" bodyfile="liblava/frame/frame.hpp" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structlava_1_1frame_1a52ca74283525108201d243f0436d9d52" prot="public" static="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>using lava::frame::run_end_func =  std::function&lt;void()&gt;</definition>
        <argsstring></argsstring>
        <name>run_end_func</name>
        <qualifiedname>lava::frame::run_end_func</qualifiedname>
        <briefdescription>
<para>Run end function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="156" column="5" bodyfile="liblava/frame/frame.hpp" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structlava_1_1frame_1a246c5dc377aa229b796c273443fd6c2a" prot="public" static="no">
        <type><ref refid="structlava_1_1frame_1a52ca74283525108201d243f0436d9d52" kindref="member">run_end_func</ref> const  &amp;</type>
        <definition>using lava::frame::run_end_func_ref =  run_end_func const&amp;</definition>
        <argsstring></argsstring>
        <name>run_end_func_ref</name>
        <qualifiedname>lava::frame::run_end_func_ref</qualifiedname>
        <briefdescription>
<para>Reference to run end function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="159" column="5" bodyfile="liblava/frame/frame.hpp" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structlava_1_1frame_1a745267e2a6632ea6b0fa30c2d0223812" prot="public" static="no">
        <type>std::function&lt; bool()&gt;</type>
        <definition>using lava::frame::run_once_func =  std::function&lt;bool()&gt;</definition>
        <argsstring></argsstring>
        <name>run_once_func</name>
        <qualifiedname>lava::frame::run_once_func</qualifiedname>
        <briefdescription>
<para>Run once function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="169" column="5" bodyfile="liblava/frame/frame.hpp" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structlava_1_1frame_1a36e6af9024658dca86df983f3d8d1539" prot="public" static="no">
        <type><ref refid="structlava_1_1frame_1a745267e2a6632ea6b0fa30c2d0223812" kindref="member">run_once_func</ref> const  &amp;</type>
        <definition>using lava::frame::run_once_func_ref =  run_once_func const&amp;</definition>
        <argsstring></argsstring>
        <name>run_once_func_ref</name>
        <qualifiedname>lava::frame::run_once_func_ref</qualifiedname>
        <briefdescription>
<para>Reference to run once function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="172" column="5" bodyfile="liblava/frame/frame.hpp" bodystart="172" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-type">
      <memberdef kind="typedef" id="structlava_1_1frame_1a8d67006a564234a4e89fb08d7e96fef0" prot="private" static="no">
        <type>std::map&lt; <ref refid="structlava_1_1id" kindref="compound">id</ref>, <ref refid="structlava_1_1frame_1ad4239b17e8ea083fd2e26055a2053dd8" kindref="member">run_func</ref> &gt;</type>
        <definition>using lava::frame::run_func_map =  std::map&lt;id, run_func&gt;</definition>
        <argsstring></argsstring>
        <name>run_func_map</name>
        <qualifiedname>lava::frame::run_func_map</qualifiedname>
        <briefdescription>
<para>Map of run functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="298" column="5" bodyfile="liblava/frame/frame.hpp" bodystart="298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structlava_1_1frame_1acf388024dbf74efaf762d9925e279393" prot="private" static="no">
        <type>std::map&lt; <ref refid="structlava_1_1id" kindref="compound">id</ref>, <ref refid="structlava_1_1frame_1a52ca74283525108201d243f0436d9d52" kindref="member">run_end_func</ref> &gt;</type>
        <definition>using lava::frame::run_end_func_map =  std::map&lt;id, run_end_func&gt;</definition>
        <argsstring></argsstring>
        <name>run_end_func_map</name>
        <qualifiedname>lava::frame::run_end_func_map</qualifiedname>
        <briefdescription>
<para>Map fo run end functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="304" column="5" bodyfile="liblava/frame/frame.hpp" bodystart="304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structlava_1_1frame_1ab02ad8459ec7c87e55529accaf626790" prot="private" static="no">
        <type>std::vector&lt; <ref refid="structlava_1_1frame_1a745267e2a6632ea6b0fa30c2d0223812" kindref="member">run_once_func</ref> &gt;</type>
        <definition>using lava::frame::run_once_func_list =  std::vector&lt;run_once_func&gt;</definition>
        <argsstring></argsstring>
        <name>run_once_func_list</name>
        <qualifiedname>lava::frame::run_once_func_list</qualifiedname>
        <briefdescription>
<para>Map of run once functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="310" column="5" bodyfile="liblava/frame/frame.hpp" bodystart="310" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structlava_1_1frame_1abdb3e371ff2b0383d17bba36c824ef0a" prot="public" static="no" mutable="no">
        <type><ref refid="structlava_1_1run__time" kindref="compound">lava::run_time</ref></type>
        <definition>lava::run_time lava::frame::run_time</definition>
        <argsstring></argsstring>
        <name>run_time</name>
        <qualifiedname>lava::frame::run_time</qualifiedname>
        <briefdescription>
<para>Run time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="246" column="20" bodyfile="liblava/frame/frame.hpp" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1frame_1abcf81b8a82712413d2dbeb6365b7dd44" prot="public" static="no" mutable="no">
        <type><ref refid="structlava_1_1platform" kindref="compound">lava::platform</ref></type>
        <definition>lava::platform lava::frame::platform</definition>
        <argsstring></argsstring>
        <name>platform</name>
        <qualifiedname>lava::frame::platform</qualifiedname>
        <briefdescription>
<para>Stage platform. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="249" column="20" bodyfile="liblava/frame/frame.hpp" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1frame_1ae0c4e5e2186c452aa59a9214ab347ed0" prot="public" static="no" mutable="no">
        <type><ref refid="structlava_1_1message__dispatcher" kindref="compound">message_dispatcher</ref></type>
        <definition>message_dispatcher lava::frame::telegraph</definition>
        <argsstring></argsstring>
        <name>telegraph</name>
        <qualifiedname>lava::frame::telegraph</qualifiedname>
        <briefdescription>
<para>Message dispatcher. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="252" column="24" bodyfile="liblava/frame/frame.hpp" bodystart="252" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structlava_1_1frame_1ab71c770d04c11ebabfc85eda385fb891" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool lava::frame::m_initialized</definition>
        <argsstring></argsstring>
        <name>m_initialized</name>
        <qualifiedname>lava::frame::m_initialized</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>Initialized state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="283" column="10" bodyfile="liblava/frame/frame.hpp" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1frame_1a8aa6c4ff0aad3cafcffc7daa44a5aed1" prot="private" static="no" mutable="no">
        <type><ref refid="structlava_1_1frame__env" kindref="compound">frame_env</ref></type>
        <definition>frame_env lava::frame::m_env</definition>
        <argsstring></argsstring>
        <name>m_env</name>
        <qualifiedname>lava::frame::m_env</qualifiedname>
        <briefdescription>
<para>Framework environment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="286" column="15" bodyfile="liblava/frame/frame.hpp" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1frame_1a4f02a9c3409d54cac2260c0be461426b" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool lava::frame::m_running</definition>
        <argsstring></argsstring>
        <name>m_running</name>
        <qualifiedname>lava::frame::m_running</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>Running state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="289" column="10" bodyfile="liblava/frame/frame.hpp" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1frame_1a70d371324d52bbd0752c1f8a2e167ff0" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool lava::frame::m_wait_for_events</definition>
        <argsstring></argsstring>
        <name>m_wait_for_events</name>
        <qualifiedname>lava::frame::m_wait_for_events</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>Wait for events state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="292" column="10" bodyfile="liblava/frame/frame.hpp" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1frame_1a80ac2026abc1d1193dce810d1d1bc34e" prot="private" static="no" mutable="no">
        <type><ref refid="time_8hpp_1a8cc2ca1333c2a464b07f9c54326a4569" kindref="member">ms</ref></type>
        <definition>ms lava::frame::m_start_time</definition>
        <argsstring></argsstring>
        <name>m_start_time</name>
        <qualifiedname>lava::frame::m_start_time</qualifiedname>
        <briefdescription>
<para>Framework start time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="295" column="8" bodyfile="liblava/frame/frame.hpp" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1frame_1aaddaf2532b0a3727314f330f94c6c027" prot="private" static="no" mutable="no">
        <type>run_func_map</type>
        <definition>run_func_map lava::frame::m_run_map</definition>
        <argsstring></argsstring>
        <name>m_run_map</name>
        <qualifiedname>lava::frame::m_run_map</qualifiedname>
        <briefdescription>
<para>Map of run functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="301" column="18" bodyfile="liblava/frame/frame.hpp" bodystart="301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1frame_1ad4a26a0d8e7b668e768255dd5f994168" prot="private" static="no" mutable="no">
        <type>run_end_func_map</type>
        <definition>run_end_func_map lava::frame::m_run_end_map</definition>
        <argsstring></argsstring>
        <name>m_run_end_map</name>
        <qualifiedname>lava::frame::m_run_end_map</qualifiedname>
        <briefdescription>
<para>Map fo run end functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="307" column="22" bodyfile="liblava/frame/frame.hpp" bodystart="307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1frame_1ae34bf043eb1fab16d9f2b48942a85843" prot="private" static="no" mutable="no">
        <type>run_once_func_list</type>
        <definition>run_once_func_list lava::frame::m_run_once_list</definition>
        <argsstring></argsstring>
        <name>m_run_once_list</name>
        <qualifiedname>lava::frame::m_run_once_list</qualifiedname>
        <briefdescription>
<para>Map of run once functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="313" column="24" bodyfile="liblava/frame/frame.hpp" bodystart="313" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structlava_1_1frame_1a04ab7848860946377650c69672a42b6b" prot="private" static="no" mutable="no">
        <type><ref refid="structlava_1_1id_1a76fc344f9c0b634c58611fb0a73528dd" kindref="member">id::list</ref></type>
        <definition>id::list lava::frame::m_run_remove_list</definition>
        <argsstring></argsstring>
        <name>m_run_remove_list</name>
        <qualifiedname>lava::frame::m_run_remove_list</qualifiedname>
        <briefdescription>
<para>List of run ids to remove. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="316" column="14" bodyfile="liblava/frame/frame.hpp" bodystart="316" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structlava_1_1frame_1a3654649fa6870251276af0149e04fa4d" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>lava::frame::frame</definition>
        <argsstring>(argh::parser cmd_line)</argsstring>
        <name>frame</name>
        <qualifiedname>lava::frame::frame</qualifiedname>
        <param>
          <type>argh::parser</type>
          <declname>cmd_line</declname>
        </param>
        <briefdescription>
<para>Construct a new framework. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd_line</parametername>
</parameternamelist>
<parameterdescription>
<para>Command line arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="106" column="14"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1frame_1aff834432bc9fe1b5e3b6c8ed322abab0" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>lava::frame::frame</definition>
        <argsstring>(frame_env env)</argsstring>
        <name>frame</name>
        <qualifiedname>lava::frame::frame</qualifiedname>
        <param>
          <type><ref refid="structlava_1_1frame__env" kindref="compound">frame_env</ref></type>
          <declname>env</declname>
        </param>
        <briefdescription>
<para>Construct a new framework. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>env</parametername>
</parameternamelist>
<parameterdescription>
<para>Framework environment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="112" column="14"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1frame_1a913bcba53dadc062fd078e57df76ed41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>lava::frame::~frame</definition>
        <argsstring>() override</argsstring>
        <name>~frame</name>
        <qualifiedname>lava::frame::~frame</qualifiedname>
        <briefdescription>
<para>Destroy the framework. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="117" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1frame_1ae8f1c745f9086f7e93e2a925cbd6362a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lava::frame::ready</definition>
        <argsstring>() const</argsstring>
        <name>ready</name>
        <qualifiedname>lava::frame::ready</qualifiedname>
        <briefdescription>
<para>Check if framework is ready. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Framework is ready or not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="123" column="10" bodyfile="liblava/frame/frame.hpp" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1frame_1a956030d60fc69b88fa171e5a772cb2e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlava_1_1frame_1ac3d3f9da01ee70a15024a715c7523635" kindref="member">result</ref></type>
        <definition>result lava::frame::run</definition>
        <argsstring>()</argsstring>
        <name>run</name>
        <qualifiedname>lava::frame::run</qualifiedname>
        <briefdescription>
<para>Run the framework. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>result Run result </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="134" column="12"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1frame_1ac8bfcb3b1bd090953d2f6897b4f98247" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lava::frame::shut_down</definition>
        <argsstring>()</argsstring>
        <name>shut_down</name>
        <qualifiedname>lava::frame::shut_down</qualifiedname>
        <briefdescription>
<para>Shut down the framework. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Shut down was successful or failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="140" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1frame_1a43ee9210bb4360cc0224cc9c145f2283" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlava_1_1id" kindref="compound">id</ref></type>
        <definition>id lava::frame::add_run</definition>
        <argsstring>(run_func_ref func)</argsstring>
        <name>add_run</name>
        <qualifiedname>lava::frame::add_run</qualifiedname>
        <param>
          <type><ref refid="structlava_1_1frame_1a1baf2b13b19143c32816bcec0dc44e1a" kindref="member">run_func_ref</ref></type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Add run to framework. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Run function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>id Id of function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="153" column="8"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1frame_1abe68c5f38b2de4bda065ec3234ab2597" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlava_1_1id" kindref="compound">id</ref></type>
        <definition>id lava::frame::add_run_end</definition>
        <argsstring>(run_end_func_ref func)</argsstring>
        <name>add_run_end</name>
        <qualifiedname>lava::frame::add_run_end</qualifiedname>
        <param>
          <type><ref refid="structlava_1_1frame_1a246c5dc377aa229b796c273443fd6c2a" kindref="member">run_end_func_ref</ref></type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Add run end to framework. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Run end function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>id Id of function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="166" column="8"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1frame_1a1390550e2be9d636d5f461c998a23f0c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lava::frame::add_run_once</definition>
        <argsstring>(run_once_func_ref func)</argsstring>
        <name>add_run_once</name>
        <qualifiedname>lava::frame::add_run_once</qualifiedname>
        <param>
          <type><ref refid="structlava_1_1frame_1a36e6af9024658dca86df983f3d8d1539" kindref="member">run_once_func_ref</ref></type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Add run once to framework. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Run once function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="178" column="10" bodyfile="liblava/frame/frame.hpp" bodystart="178" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1frame_1a40025a8683f4c903b1166642cdf90132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lava::frame::remove</definition>
        <argsstring>(id::ref func_id)</argsstring>
        <name>remove</name>
        <qualifiedname>lava::frame::remove</qualifiedname>
        <param>
          <type><ref refid="structlava_1_1id_1a226df789a94177f765bdcaac2988eda0" kindref="member">id::ref</ref></type>
          <declname>func_id</declname>
        </param>
        <briefdescription>
<para>Remove a function from framework. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Remove was successful or failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="187" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1frame_1a0d0853f9375ba76b11f5b9af8fc43ec8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="time_8hpp_1a8cc2ca1333c2a464b07f9c54326a4569" kindref="member">ms</ref></type>
        <definition>ms lava::frame::get_running_time</definition>
        <argsstring>() const</argsstring>
        <name>get_running_time</name>
        <qualifiedname>lava::frame::get_running_time</qualifiedname>
        <briefdescription>
<para>Get the running time. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>ms Time since start of framework </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="193" column="8" bodyfile="liblava/frame/frame.hpp" bodystart="193" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1frame_1a3c57694f474bd765f413dec540cad1f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="types_8hpp_1aeb5fe0bd98dc4fba84d1e81c12d31476" kindref="member">r64</ref></type>
        <definition>r64 lava::frame::get_running_time_sec</definition>
        <argsstring>() const</argsstring>
        <name>get_running_time_sec</name>
        <qualifiedname>lava::frame::get_running_time_sec</qualifiedname>
        <briefdescription>
<para>Get the running time in seconds. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>r64 Time since start of framework </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="201" column="9" bodyfile="liblava/frame/frame.hpp" bodystart="201" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1frame_1a5f59d71443b1c39fb0493687bdeec739" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="argh_8hpp_1a0ec69c8269dd4598981cbfeea2cc88d1" kindref="member">cmd_line</ref></type>
        <definition>cmd_line lava::frame::get_cmd_line</definition>
        <argsstring>() const</argsstring>
        <name>get_cmd_line</name>
        <qualifiedname>lava::frame::get_cmd_line</qualifiedname>
        <briefdescription>
<para>Get the command line arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>cmd_line Command line arguments </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="209" column="14" bodyfile="liblava/frame/frame.hpp" bodystart="209" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1frame_1a83fad308a14053ddf4fa606c4eb249be" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structlava_1_1frame__env_1ade8cafeb094c26f88fcee27114a42287" kindref="member">frame_env::ref</ref></type>
        <definition>frame_env::ref lava::frame::get_env</definition>
        <argsstring>() const</argsstring>
        <name>get_env</name>
        <qualifiedname>lava::frame::get_env</qualifiedname>
        <briefdescription>
<para>Get the framework environment. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structlava_1_1frame__env_1ade8cafeb094c26f88fcee27114a42287" kindref="member">frame_env::ref</ref> Framework environment </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="217" column="20" bodyfile="liblava/frame/frame.hpp" bodystart="217" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1frame_1a41b099b4b77b7f9929e9645aa6f31a78" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="types_8hpp_1a6ac8e87ce8d5b170084592abbef3b8c9" kindref="member">name</ref></type>
        <definition>name lava::frame::get_name</definition>
        <argsstring>() const</argsstring>
        <name>get_name</name>
        <qualifiedname>lava::frame::get_name</qualifiedname>
        <briefdescription>
<para>Get the name of application. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>name Name of application </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="225" column="10" bodyfile="liblava/frame/frame.hpp" bodystart="225" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1frame_1a6622e4273b1399a9aff90889ffbe4547" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lava::frame::waiting_for_events</definition>
        <argsstring>() const</argsstring>
        <name>waiting_for_events</name>
        <qualifiedname>lava::frame::waiting_for_events</qualifiedname>
        <briefdescription>
<para>Check if framework is waiting for events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Framework waits for events or not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="233" column="10" bodyfile="liblava/frame/frame.hpp" bodystart="233" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1frame_1ae98d1fd17b5ab7f856c0aa6cc1eff60b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lava::frame::set_wait_for_events</definition>
        <argsstring>(bool value=true)</argsstring>
        <name>set_wait_for_events</name>
        <qualifiedname>lava::frame::set_wait_for_events</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set wait for events in framework. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Wait for events state </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="241" column="10" bodyfile="liblava/frame/frame.hpp" bodystart="241" bodyend="243"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="structlava_1_1frame_1a5bc9d59eae14eae2f65ad09aa3508906" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lava::frame::setup</definition>
        <argsstring>()</argsstring>
        <name>setup</name>
        <qualifiedname>lava::frame::setup</qualifiedname>
        <briefdescription>
<para>Set up the framework. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Setup was successful or failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="259" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1frame_1ab3672d8cda33387648cf10f4072c7103" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lava::frame::teardown</definition>
        <argsstring>()</argsstring>
        <name>teardown</name>
        <qualifiedname>lava::frame::teardown</qualifiedname>
        <briefdescription>
<para>Tear down the framework. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="264" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1frame_1a83c4933d42c503f19916bf3d7726108d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool lava::frame::run_step</definition>
        <argsstring>()</argsstring>
        <name>run_step</name>
        <qualifiedname>lava::frame::run_step</qualifiedname>
        <briefdescription>
<para>Run a step. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Run was successful or failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="270" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1frame_1a9898185d887395af67ecfc8782495e7f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lava::frame::trigger_run_remove</definition>
        <argsstring>()</argsstring>
        <name>trigger_run_remove</name>
        <qualifiedname>lava::frame::trigger_run_remove</qualifiedname>
        <briefdescription>
<para>Trigger run remove. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="275" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structlava_1_1frame_1a5775d60b983c04624aa82e229b421539" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lava::frame::trigger_run_end</definition>
        <argsstring>()</argsstring>
        <name>trigger_run_end</name>
        <qualifiedname>lava::frame::trigger_run_end</qualifiedname>
        <briefdescription>
<para>Trigger run end. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblava/frame/frame.hpp" line="280" column="10"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Framework. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>lava::app</label>
        <link refid="structlava_1_1app"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>lava::engine</label>
        <link refid="structlava_1_1engine"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>lava::frame</label>
        <link refid="structlava_1_1frame"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>lava::interface</label>
        <link refid="structlava_1_1interface"/>
      </node>
      <node id="3">
        <label>lava::no_copy_no_move</label>
        <link refid="structlava_1_1no__copy__no__move"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>lava::frame</label>
        <link refid="structlava_1_1frame"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>run_time</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>platform</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>telegraph</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>lava::interface</label>
        <link refid="structlava_1_1interface"/>
      </node>
      <node id="6">
        <label>lava::message_dispatcher</label>
        <link refid="structlava_1_1message__dispatcher"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>lava::no_copy_no_move</label>
        <link refid="structlava_1_1no__copy__no__move"/>
      </node>
      <node id="5">
        <label>lava::platform</label>
        <link refid="structlava_1_1platform"/>
      </node>
      <node id="4">
        <label>lava::run_time</label>
        <link refid="structlava_1_1run__time"/>
      </node>
      <node id="7">
        <label>lava::telegraph</label>
        <link refid="structlava_1_1telegraph"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="liblava/frame/frame.hpp" line="98" column="1" bodyfile="liblava/frame/frame.hpp" bodystart="98" bodyend="317"/>
    <listofallmembers>
      <member refid="structlava_1_1frame_1a43ee9210bb4360cc0224cc9c145f2283" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>add_run</name></member>
      <member refid="structlava_1_1frame_1abe68c5f38b2de4bda065ec3234ab2597" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>add_run_end</name></member>
      <member refid="structlava_1_1frame_1a1390550e2be9d636d5f461c998a23f0c" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>add_run_once</name></member>
      <member refid="structlava_1_1frame_1a3654649fa6870251276af0149e04fa4d" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>frame</name></member>
      <member refid="structlava_1_1frame_1aff834432bc9fe1b5e3b6c8ed322abab0" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>frame</name></member>
      <member refid="structlava_1_1frame_1a5f59d71443b1c39fb0493687bdeec739" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>get_cmd_line</name></member>
      <member refid="structlava_1_1frame_1a83fad308a14053ddf4fa606c4eb249be" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>get_env</name></member>
      <member refid="structlava_1_1frame_1a41b099b4b77b7f9929e9645aa6f31a78" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>get_name</name></member>
      <member refid="structlava_1_1frame_1a0d0853f9375ba76b11f5b9af8fc43ec8" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>get_running_time</name></member>
      <member refid="structlava_1_1frame_1a3c57694f474bd765f413dec540cad1f1" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>get_running_time_sec</name></member>
      <member refid="structlava_1_1frame_1a8aa6c4ff0aad3cafcffc7daa44a5aed1" prot="private" virt="non-virtual"><scope>lava::frame</scope><name>m_env</name></member>
      <member refid="structlava_1_1frame_1ab71c770d04c11ebabfc85eda385fb891" prot="private" virt="non-virtual"><scope>lava::frame</scope><name>m_initialized</name></member>
      <member refid="structlava_1_1frame_1ad4a26a0d8e7b668e768255dd5f994168" prot="private" virt="non-virtual"><scope>lava::frame</scope><name>m_run_end_map</name></member>
      <member refid="structlava_1_1frame_1aaddaf2532b0a3727314f330f94c6c027" prot="private" virt="non-virtual"><scope>lava::frame</scope><name>m_run_map</name></member>
      <member refid="structlava_1_1frame_1ae34bf043eb1fab16d9f2b48942a85843" prot="private" virt="non-virtual"><scope>lava::frame</scope><name>m_run_once_list</name></member>
      <member refid="structlava_1_1frame_1a04ab7848860946377650c69672a42b6b" prot="private" virt="non-virtual"><scope>lava::frame</scope><name>m_run_remove_list</name></member>
      <member refid="structlava_1_1frame_1a4f02a9c3409d54cac2260c0be461426b" prot="private" virt="non-virtual"><scope>lava::frame</scope><name>m_running</name></member>
      <member refid="structlava_1_1frame_1a80ac2026abc1d1193dce810d1d1bc34e" prot="private" virt="non-virtual"><scope>lava::frame</scope><name>m_start_time</name></member>
      <member refid="structlava_1_1frame_1a70d371324d52bbd0752c1f8a2e167ff0" prot="private" virt="non-virtual"><scope>lava::frame</scope><name>m_wait_for_events</name></member>
      <member refid="structlava_1_1no__copy__no__move_1ac97369ee1b1a70996ab3b9b24bf26432" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>no_copy_no_move</name></member>
      <member refid="structlava_1_1no__copy__no__move_1a7942908379614cbb8d6260192d76347c" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>no_copy_no_move</name></member>
      <member refid="structlava_1_1no__copy__no__move_1aa3211995685035c9ca4d0a3a7e4b5ac8" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>operator=</name></member>
      <member refid="structlava_1_1frame_1abcf81b8a82712413d2dbeb6365b7dd44" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>platform</name></member>
      <member refid="structlava_1_1frame_1ae8f1c745f9086f7e93e2a925cbd6362a" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>ready</name></member>
      <member refid="structlava_1_1frame_1a40025a8683f4c903b1166642cdf90132" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>remove</name></member>
      <member refid="structlava_1_1frame_1ac3d3f9da01ee70a15024a715c7523635" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>result</name></member>
      <member refid="structlava_1_1frame_1a956030d60fc69b88fa171e5a772cb2e6" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>run</name></member>
      <member refid="structlava_1_1frame_1a52ca74283525108201d243f0436d9d52" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>run_end_func</name></member>
      <member refid="structlava_1_1frame_1acf388024dbf74efaf762d9925e279393" prot="private" virt="non-virtual"><scope>lava::frame</scope><name>run_end_func_map</name></member>
      <member refid="structlava_1_1frame_1a246c5dc377aa229b796c273443fd6c2a" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>run_end_func_ref</name></member>
      <member refid="structlava_1_1frame_1ad4239b17e8ea083fd2e26055a2053dd8" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>run_func</name></member>
      <member refid="structlava_1_1frame_1a8d67006a564234a4e89fb08d7e96fef0" prot="private" virt="non-virtual"><scope>lava::frame</scope><name>run_func_map</name></member>
      <member refid="structlava_1_1frame_1a1baf2b13b19143c32816bcec0dc44e1a" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>run_func_ref</name></member>
      <member refid="structlava_1_1frame_1a745267e2a6632ea6b0fa30c2d0223812" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>run_once_func</name></member>
      <member refid="structlava_1_1frame_1ab02ad8459ec7c87e55529accaf626790" prot="private" virt="non-virtual"><scope>lava::frame</scope><name>run_once_func_list</name></member>
      <member refid="structlava_1_1frame_1a36e6af9024658dca86df983f3d8d1539" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>run_once_func_ref</name></member>
      <member refid="structlava_1_1frame_1a83c4933d42c503f19916bf3d7726108d" prot="private" virt="non-virtual"><scope>lava::frame</scope><name>run_step</name></member>
      <member refid="structlava_1_1frame_1abdb3e371ff2b0383d17bba36c824ef0a" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>run_time</name></member>
      <member refid="structlava_1_1frame_1adaea615ada78d449d51078340bbd05fd" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>s_ptr</name></member>
      <member refid="structlava_1_1frame_1ae98d1fd17b5ab7f856c0aa6cc1eff60b" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>set_wait_for_events</name></member>
      <member refid="structlava_1_1frame_1a5bc9d59eae14eae2f65ad09aa3508906" prot="private" virt="non-virtual"><scope>lava::frame</scope><name>setup</name></member>
      <member refid="structlava_1_1frame_1ac8bfcb3b1bd090953d2f6897b4f98247" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>shut_down</name></member>
      <member refid="structlava_1_1frame_1ab3672d8cda33387648cf10f4072c7103" prot="private" virt="non-virtual"><scope>lava::frame</scope><name>teardown</name></member>
      <member refid="structlava_1_1frame_1ae0c4e5e2186c452aa59a9214ab347ed0" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>telegraph</name></member>
      <member refid="structlava_1_1frame_1a5775d60b983c04624aa82e229b421539" prot="private" virt="non-virtual"><scope>lava::frame</scope><name>trigger_run_end</name></member>
      <member refid="structlava_1_1frame_1a9898185d887395af67ecfc8782495e7f" prot="private" virt="non-virtual"><scope>lava::frame</scope><name>trigger_run_remove</name></member>
      <member refid="structlava_1_1frame_1a6622e4273b1399a9aff90889ffbe4547" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>waiting_for_events</name></member>
      <member refid="structlava_1_1frame_1a913bcba53dadc062fd078e57df76ed41" prot="public" virt="non-virtual"><scope>lava::frame</scope><name>~frame</name></member>
      <member refid="structlava_1_1interface_1a9b6fe12d71f6da5dea89d44c62a5a046" prot="public" virt="virtual"><scope>lava::frame</scope><name>~interface</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
