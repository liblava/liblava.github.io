<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="memory_8hpp" kind="file" language="C++">
    <compoundname>memory.hpp</compoundname>
    <includes refid="base_2base_8hpp" local="yes">liblava/base/base.hpp</includes>
    <includes local="yes">liblava/fwd.hpp</includes>
    <includes local="yes">vk_mem_alloc.h</includes>
    <includes local="no">memory</includes>
    <includedby refid="base_8hpp" local="yes">liblava/base.hpp</includedby>
    <includedby refid="device__table_8hpp" local="yes">liblava/base/device_table.hpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>liblava/base/base.hpp</label>
        <link refid="base_2base_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>liblava/base/memory.hpp</label>
        <link refid="memory_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>liblava/core/types.hpp</label>
        <link refid="types_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>liblava/core/version.hpp</label>
        <link refid="version_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>liblava/util/math.hpp</label>
        <link refid="math_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>cstdint</label>
      </node>
      <node id="7">
        <label>functional</label>
      </node>
      <node id="14">
        <label>glm/glm.hpp</label>
      </node>
      <node id="15">
        <label>glm/gtc/matrix_transform.hpp</label>
      </node>
      <node id="16">
        <label>glm/gtc/type_ptr.hpp</label>
      </node>
      <node id="5">
        <label>liblava/core/def.hpp</label>
      </node>
      <node id="19">
        <label>liblava/fwd.hpp</label>
      </node>
      <node id="8">
        <label>map</label>
      </node>
      <node id="21">
        <label>memory</label>
      </node>
      <node id="13">
        <label>picosha2.h</label>
      </node>
      <node id="9">
        <label>string</label>
      </node>
      <node id="10">
        <label>string_view</label>
      </node>
      <node id="11">
        <label>vector</label>
      </node>
      <node id="20">
        <label>vk_mem_alloc.h</label>
      </node>
      <node id="18">
        <label>volk.h</label>
      </node>
      <node id="17">
        <label>vulkan/vulkan.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="11">
        <label>liblava/app.hpp</label>
        <link refid="app_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>liblava/app/app.hpp</label>
        <link refid="app_2app_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>liblava/app/benchmark.hpp</label>
        <link refid="benchmark_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>liblava/app/camera.hpp</label>
        <link refid="camera_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>liblava/app/config.hpp</label>
        <link refid="config_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>liblava/app/forward_shading.hpp</label>
        <link refid="forward__shading_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>liblava/app/imgui.hpp</label>
        <link refid="imgui_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>liblava/asset.hpp</label>
        <link refid="asset_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>liblava/asset/load_image.hpp</label>
        <link refid="load__image_8hpp"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>liblava/asset/load_mesh.hpp</label>
        <link refid="load__mesh_8hpp"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>liblava/asset/load_texture.hpp</label>
        <link refid="load__texture_8hpp"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>liblava/asset/write_image.hpp</label>
        <link refid="write__image_8hpp"/>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>liblava/base.hpp</label>
        <link refid="base_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>liblava/base/device.hpp</label>
        <link refid="device_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>liblava/base/device_table.hpp</label>
        <link refid="device__table_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>liblava/base/instance.hpp</label>
        <link refid="instance_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>liblava/base/memory.hpp</label>
        <link refid="memory_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>liblava/base/physical_device.hpp</label>
        <link refid="physical__device_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>liblava/base/platform.hpp</label>
        <link refid="platform_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>liblava/block.hpp</label>
        <link refid="block_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>liblava/block/block.hpp</label>
        <link refid="block_2block_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>liblava/block/compute_pipeline.hpp</label>
        <link refid="compute__pipeline_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>liblava/block/descriptor.hpp</label>
        <link refid="descriptor_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>liblava/block/pipeline.hpp</label>
        <link refid="pipeline_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>liblava/block/pipeline_layout.hpp</label>
        <link refid="pipeline__layout_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>liblava/block/render_pass.hpp</label>
        <link refid="render__pass_8hpp"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>liblava/block/render_pipeline.hpp</label>
        <link refid="render__pipeline_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>liblava/block/subpass.hpp</label>
        <link refid="subpass_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>liblava/engine.hpp</label>
        <link refid="engine_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>liblava/engine/engine.hpp</label>
        <link refid="engine_2engine_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>liblava/engine/producer.hpp</label>
        <link refid="producer_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>liblava/frame.hpp</label>
        <link refid="frame_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>liblava/frame/frame.hpp</label>
        <link refid="frame_2frame_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>liblava/frame/render_target.hpp</label>
        <link refid="render__target_8hpp"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>liblava/frame/renderer.hpp</label>
        <link refid="renderer_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>liblava/frame/swapchain.hpp</label>
        <link refid="swapchain_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>liblava/lava.hpp</label>
        <link refid="lava_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>liblava/resource.hpp</label>
        <link refid="resource_8hpp"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>liblava/resource/buffer.hpp</label>
        <link refid="buffer_8hpp"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>liblava/resource/format.hpp</label>
        <link refid="format_8hpp"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>liblava/resource/image.hpp</label>
        <link refid="image_8hpp"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>liblava/resource/mesh.hpp</label>
        <link refid="mesh_8hpp"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>liblava/resource/texture.hpp</label>
        <link refid="texture_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>liblava/test.hpp</label>
        <link refid="test_8hpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structlava_1_1allocator" prot="public">lava::allocator</innerclass>
    <innerclass refid="structlava_1_1memory" prot="public">lava::memory</innerclass>
    <innernamespace refid="namespacelava">lava</innernamespace>
    <briefdescription>
<para>Vulkan allocator. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="authors"><para>Lava Block OÜ and contributors </para>
</simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2018-present, MIT License </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="base_2base_8hpp" kindref="compound">liblava/base/base.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;liblava/fwd.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;vk_mem_alloc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">lava<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="structlava_1_1allocator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlava_1_1allocator" kindref="compound">allocator</ref><sp/>{</highlight></codeline>
<codeline lineno="26" refid="structlava_1_1allocator_1ab7f304804ff970ac1436b31ebf5647d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structlava_1_1allocator_1ab7f304804ff970ac1436b31ebf5647d8" kindref="member">s_ptr</ref><sp/>=<sp/>std::shared_ptr&lt;allocator&gt;;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="structlava_1_1allocator_1ac694ae1eb7b09a888504a757a63ef08e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structlava_1_1allocator_1ac694ae1eb7b09a888504a757a63ef08e" kindref="member">device_c_ptr</ref><sp/>=<sp/><ref refid="structlava_1_1device" kindref="compound">device</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="structlava_1_1allocator_1a1ac4e448d0e97b6e4a3fc96d10af2947" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structlava_1_1allocator_1ab7f304804ff970ac1436b31ebf5647d8" kindref="member">s_ptr</ref><sp/><ref refid="structlava_1_1allocator_1a1ac4e448d0e97b6e4a3fc96d10af2947" kindref="member">make</ref>()<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;allocator&gt;();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="structlava_1_1allocator_1a43595f4de65311f903bdaf3f0a920d54" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlava_1_1allocator_1a43595f4de65311f903bdaf3f0a920d54" kindref="member">allocator</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="structlava_1_1allocator_1a104549380e2442ee141fc82a3665391c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structlava_1_1allocator_1a104549380e2442ee141fc82a3665391c" kindref="member">allocator</ref>(VmaAllocator<sp/><ref refid="structlava_1_1allocator" kindref="compound">allocator</ref>)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_allocator(<ref refid="structlava_1_1allocator" kindref="compound">allocator</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="structlava_1_1allocator_1a9a166cb659c6c4b1512c419842431b2d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structlava_1_1allocator_1a9a166cb659c6c4b1512c419842431b2d" kindref="member">create</ref>(<ref refid="structlava_1_1allocator_1ac694ae1eb7b09a888504a757a63ef08e" kindref="member">device_c_ptr</ref><sp/><ref refid="structlava_1_1device" kindref="compound">device</ref>,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VmaAllocatorCreateFlags<sp/>flags<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="structlava_1_1allocator_1a07c98ecaa86fbf0184c2082a810ce484" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structlava_1_1allocator_1a07c98ecaa86fbf0184c2082a810ce484" kindref="member">destroy</ref>();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="structlava_1_1allocator_1a4b9ce048e3a652edca92cd4f183e7de3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structlava_1_1allocator_1a4b9ce048e3a652edca92cd4f183e7de3" kindref="member">valid</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_allocator<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="structlava_1_1allocator_1ad0b6446682e0edef271d7afbbb7aa97f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>VmaAllocator<sp/><ref refid="structlava_1_1allocator_1ad0b6446682e0edef271d7afbbb7aa97f" kindref="member">get</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_allocator;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>VmaAllocator<sp/>m_allocator<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">};</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="memory_8hpp_1a021206737032024500fda8195795e5ae" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structlava_1_1allocator_1ab7f304804ff970ac1436b31ebf5647d8" kindref="member">allocator::s_ptr</ref><sp/><ref refid="memory_8hpp_1a021206737032024500fda8195795e5ae" kindref="member">create_allocator</ref>(<ref refid="structlava_1_1allocator_1ac694ae1eb7b09a888504a757a63ef08e" kindref="member">allocator::device_c_ptr</ref><sp/><ref refid="structlava_1_1device" kindref="compound">device</ref>,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VmaAllocatorCreateFlags<sp/>flags<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="structlava_1_1allocator_1a1ac4e448d0e97b6e4a3fc96d10af2947" kindref="member">allocator::make</ref>();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result-&gt;create(<ref refid="structlava_1_1device" kindref="compound">device</ref>,<sp/>flags))</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="structlava_1_1memory" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlava_1_1memory" kindref="compound">memory</ref><sp/>:<sp/><ref refid="structlava_1_1no__copy__no__move" kindref="compound">no_copy_no_move</ref><sp/>{</highlight></codeline>
<codeline lineno="108" refid="structlava_1_1memory_1a742915f645a3e53af3bb3099cb150d45" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlava_1_1memory_1a742915f645a3e53af3bb3099cb150d45" kindref="member">memory</ref>();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="structlava_1_1memory_1afd4beb821e264e14ccb8ac4ce7385142" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structlava_1_1memory" kindref="compound">memory</ref>&amp;<sp/><ref refid="structlava_1_1memory_1afd4beb821e264e14ccb8ac4ce7385142" kindref="member">instance</ref>()<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structlava_1_1memory" kindref="compound">memory</ref><sp/><ref refid="structlava_1_1memory_1a742915f645a3e53af3bb3099cb150d45" kindref="member">memory</ref>;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structlava_1_1memory_1a742915f645a3e53af3bb3099cb150d45" kindref="member">memory</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="structlava_1_1memory_1a2bff8517a31a95e3f74e981dce64ee64" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>VkAllocationCallbacks*<sp/><ref refid="structlava_1_1memory_1a2bff8517a31a95e3f74e981dce64ee64" kindref="member">alloc</ref>()<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_use_custom_cpu_callbacks)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;m_vk_callbacks;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="structlava_1_1memory_1aa6cf33bee632e9ca622bd398a2023860" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structlava_1_1memory_1aa6cf33bee632e9ca622bd398a2023860" kindref="member">set_callbacks</ref>(VkAllocationCallbacks<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>callbacks)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_vk_callbacks<sp/>=<sp/>callbacks;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="structlava_1_1memory_1a304445836b73d2d86aa08c33b1df6ba6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structlava_1_1memory_1a304445836b73d2d86aa08c33b1df6ba6" kindref="member">set_use_custom_cpu_callbacks</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_use_custom_cpu_callbacks<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_use_custom_cpu_callbacks<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>VkAllocationCallbacks<sp/>m_vk_callbacks<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="152"><highlight class="normal">};</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="memory_8hpp_1a033009b2750404dee2dbcaa5f7a869a6" refkind="member"><highlight class="normal"><ref refid="types_8hpp_1a2a40eb7fccb1ebcfd58d6d4b7a078e5c" kindref="member">index</ref><sp/><ref refid="memory_8hpp_1a033009b2750404dee2dbcaa5f7a869a6" kindref="member">find_memory_type_with_properties</ref>(VkPhysicalDeviceMemoryProperties<sp/>properties,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="types_8hpp_1ae3c4bbc50dd4583ab0df2c24c49a49c9" kindref="member">ui32</ref><sp/>type_bits,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkMemoryPropertyFlags<sp/>required_properties);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="memory_8hpp_1a82f310a9f64c8e0390df94cdaccad831" refkind="member"><highlight class="normal"><ref refid="types_8hpp_1a2a40eb7fccb1ebcfd58d6d4b7a078e5c" kindref="member">index</ref><sp/><ref refid="memory_8hpp_1a82f310a9f64c8e0390df94cdaccad831" kindref="member">find_memory_type</ref>(VkPhysicalDevice<sp/>gpu,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkMemoryPropertyFlags<sp/>properties,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="types_8hpp_1ae3c4bbc50dd4583ab0df2c24c49a49c9" kindref="member">ui32</ref><sp/>type_bits);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>lava</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="liblava/base/memory.hpp"/>
  </compounddef>
</doxygen>
